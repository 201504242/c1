
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.*;
import java.util.LinkedList;
import ast.instrucciones.funciones.*;
import ast.instrucciones.graficas.*;
import ast.instrucciones.*;
import ast.expresiones.*;
import ast.expresiones.operaciones.Operacion.Operador;
import ast.expresiones.operaciones.*;
import entorno.Tipo;
import entorno.Tipo.Tipos;
import entorno.Var;
import entorno.nodoExp;
import entorno.Simbolo.*;
import entorno.Simbolo;
import entorno.fantasmita;
import ast.Expresion;
import ast.Instruccion;
import ast.AST;
import ast.NodoAST;
import olc2.p1_201504242.Ventana;
import olc2.p1_201504242.JError;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\125\000\002\002\004\000\002\003\003\000\002\002" +
    "\003\000\002\004\004\000\002\004\003\000\002\006\005" +
    "\000\002\006\004\000\002\016\011\000\002\016\010\000" +
    "\002\024\005\000\002\024\003\000\002\025\003\000\002" +
    "\025\005\000\002\020\005\000\002\020\010\000\002\020" +
    "\006\000\002\020\006\000\002\020\011\000\002\020\007" +
    "\000\002\022\004\000\002\022\003\000\002\023\005\000" +
    "\002\023\007\000\002\023\007\000\002\023\006\000\002" +
    "\023\006\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\004\000\002\005\004\000\002" +
    "\005\004\000\002\005\004\000\002\005\004\000\002\005" +
    "\003\000\002\021\005\000\002\021\006\000\002\007\007" +
    "\000\002\007\011\000\002\007\011\000\002\010\007\000" +
    "\002\012\011\000\002\011\010\000\002\013\006\000\002" +
    "\013\003\000\002\014\005\000\002\014\003\000\002\017" +
    "\005\000\002\017\003\000\002\015\004\000\002\015\005" +
    "\000\002\015\005\000\002\015\005\000\002\015\005\000" +
    "\002\015\005\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\005\000\002\015" +
    "\005\000\002\015\005\000\002\015\005\000\002\015\005" +
    "\000\002\015\004\000\002\015\007\000\002\015\005\000" +
    "\002\015\005\000\002\015\006\000\002\015\003\000\002" +
    "\015\004\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\237\000\024\042\004\044\011\047\026\050\007\051" +
    "\015\053\016\055\027\056\030\062\020\001\002\000\004" +
    "\005\233\001\002\000\026\002\uffff\042\004\044\011\047" +
    "\026\050\007\051\015\053\016\055\027\056\030\062\020" +
    "\001\002\000\030\002\uffe3\012\uffe3\042\uffe3\044\uffe3\047" +
    "\uffe3\050\uffe3\051\uffe3\053\uffe3\055\uffe3\056\uffe3\062\uffe3" +
    "\001\002\000\004\011\152\001\002\000\004\002\225\001" +
    "\002\000\032\002\uffe1\004\224\012\uffe1\042\uffe1\044\uffe1" +
    "\047\uffe1\050\uffe1\051\uffe1\053\uffe1\055\uffe1\056\uffe1\062" +
    "\uffe1\001\002\000\032\002\uffdf\004\223\012\uffdf\042\uffdf" +
    "\044\uffdf\047\uffdf\050\uffdf\051\uffdf\053\uffdf\055\uffdf\056" +
    "\uffdf\062\uffdf\001\002\000\030\002\ufffd\012\ufffd\042\ufffd" +
    "\044\ufffd\047\ufffd\050\ufffd\051\ufffd\053\ufffd\055\ufffd\056" +
    "\ufffd\062\ufffd\001\002\000\004\002\000\001\002\000\004" +
    "\005\215\001\002\000\032\002\uffe0\004\214\012\uffe0\042" +
    "\uffe0\044\uffe0\047\uffe0\050\uffe0\051\uffe0\053\uffe0\055\uffe0" +
    "\056\uffe0\062\uffe0\001\002\000\030\002\uffe5\012\uffe5\042" +
    "\uffe5\044\uffe5\047\uffe5\050\uffe5\051\uffe5\053\uffe5\055\uffe5" +
    "\056\uffe5\062\uffe5\001\002\000\010\005\163\007\107\033" +
    "\162\001\002\000\030\002\uffe6\012\uffe6\042\uffe6\044\uffe6" +
    "\047\uffe6\050\uffe6\051\uffe6\053\uffe6\055\uffe6\056\uffe6\062" +
    "\uffe6\001\002\000\032\002\uffe2\004\160\012\uffe2\042\uffe2" +
    "\044\uffe2\047\uffe2\050\uffe2\051\uffe2\053\uffe2\055\uffe2\056" +
    "\uffe2\062\uffe2\001\002\000\030\002\uffe4\012\uffe4\042\uffe4" +
    "\044\uffe4\047\uffe4\050\uffe4\051\uffe4\053\uffe4\055\uffe4\056" +
    "\uffe4\062\uffe4\001\002\000\032\002\uffde\004\157\012\uffde" +
    "\042\uffde\044\uffde\047\uffde\050\uffde\051\uffde\053\uffde\055" +
    "\uffde\056\uffde\062\uffde\001\002\000\030\002\uffe7\012\uffe7" +
    "\042\uffe7\044\uffe7\047\uffe7\050\uffe7\051\uffe7\053\uffe7\055" +
    "\uffe7\056\uffe7\062\uffe7\001\002\000\004\005\146\001\002" +
    "\000\034\002\uffce\004\uffce\005\031\012\uffce\042\uffce\044" +
    "\uffce\047\uffce\050\uffce\051\uffce\053\uffce\055\uffce\056\uffce" +
    "\062\uffce\001\002\000\030\002\uffd8\012\uffd8\042\uffd8\044" +
    "\uffd8\047\uffd8\050\uffd8\051\uffd8\053\uffd8\055\uffd8\056\uffd8" +
    "\062\uffd8\001\002\000\030\005\041\015\033\032\036\036" +
    "\034\037\035\040\040\041\044\057\037\060\032\062\042" +
    "\063\045\001\002\000\102\002\uffb2\004\uffb2\006\uffb2\010" +
    "\uffb2\012\uffb2\013\uffb2\014\uffb2\015\uffb2\016\uffb2\017\uffb2" +
    "\020\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2\026" +
    "\uffb2\027\uffb2\030\uffb2\031\uffb2\033\uffb2\034\uffb2\035\uffb2" +
    "\042\uffb2\044\uffb2\047\uffb2\050\uffb2\051\uffb2\053\uffb2\055" +
    "\uffb2\056\uffb2\062\uffb2\001\002\000\030\005\041\015\033" +
    "\032\036\036\034\037\035\040\040\041\044\057\037\060" +
    "\032\062\042\063\045\001\002\000\102\002\uffae\004\uffae" +
    "\006\uffae\010\uffae\012\uffae\013\uffae\014\uffae\015\uffae\016" +
    "\uffae\017\uffae\020\uffae\021\uffae\022\uffae\023\uffae\024\uffae" +
    "\025\uffae\026\uffae\027\uffae\030\uffae\031\uffae\033\uffae\034" +
    "\uffae\035\uffae\042\uffae\044\uffae\047\uffae\050\uffae\051\uffae" +
    "\053\uffae\055\uffae\056\uffae\062\uffae\001\002\000\102\002" +
    "\uffb0\004\uffb0\006\uffb0\010\uffb0\012\uffb0\013\uffb0\014\uffb0" +
    "\015\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0\023" +
    "\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0" +
    "\033\uffb0\034\uffb0\035\uffb0\042\uffb0\044\uffb0\047\uffb0\050" +
    "\uffb0\051\uffb0\053\uffb0\055\uffb0\056\uffb0\062\uffb0\001\002" +
    "\000\030\005\041\015\033\032\036\036\034\037\035\040" +
    "\040\041\044\057\037\060\032\062\042\063\045\001\002" +
    "\000\102\002\uffb3\004\uffb3\006\uffb3\010\uffb3\012\uffb3\013" +
    "\uffb3\014\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffb3" +
    "\022\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3\030" +
    "\uffb3\031\uffb3\033\uffb3\034\uffb3\035\uffb3\042\uffb3\044\uffb3" +
    "\047\uffb3\050\uffb3\051\uffb3\053\uffb3\055\uffb3\056\uffb3\062" +
    "\uffb3\001\002\000\102\002\uffaf\004\uffaf\006\uffaf\010\uffaf" +
    "\012\uffaf\013\uffaf\014\uffaf\015\uffaf\016\uffaf\017\uffaf\020" +
    "\uffaf\021\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf" +
    "\027\uffaf\030\uffaf\031\uffaf\033\uffaf\034\uffaf\035\uffaf\042" +
    "\uffaf\044\uffaf\047\uffaf\050\uffaf\051\uffaf\053\uffaf\055\uffaf" +
    "\056\uffaf\062\uffaf\001\002\000\030\005\041\015\033\032" +
    "\036\036\034\037\035\040\040\041\044\057\037\060\032" +
    "\062\042\063\045\001\002\000\106\002\uffb5\004\uffb5\005" +
    "\111\006\uffb5\007\107\010\uffb5\012\uffb5\013\uffb5\014\uffb5" +
    "\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5\023" +
    "\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5" +
    "\033\uffb5\034\uffb5\035\uffb5\042\uffb5\044\uffb5\047\uffb5\050" +
    "\uffb5\051\uffb5\053\uffb5\055\uffb5\056\uffb5\062\uffb5\001\002" +
    "\000\042\006\064\014\056\015\050\016\053\017\054\020" +
    "\051\021\062\022\047\023\065\024\061\025\052\026\057" +
    "\027\046\030\063\031\060\034\055\001\002\000\102\002" +
    "\uffad\004\uffad\006\uffad\010\uffad\012\uffad\013\uffad\014\uffad" +
    "\015\uffad\016\uffad\017\uffad\020\uffad\021\uffad\022\uffad\023" +
    "\uffad\024\uffad\025\uffad\026\uffad\027\uffad\030\uffad\031\uffad" +
    "\033\uffad\034\uffad\035\uffad\042\uffad\044\uffad\047\uffad\050" +
    "\uffad\051\uffad\053\uffad\055\uffad\056\uffad\062\uffad\001\002" +
    "\000\102\002\uffb1\004\uffb1\006\uffb1\010\uffb1\012\uffb1\013" +
    "\uffb1\014\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1" +
    "\022\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030" +
    "\uffb1\031\uffb1\033\uffb1\034\uffb1\035\uffb1\042\uffb1\044\uffb1" +
    "\047\uffb1\050\uffb1\051\uffb1\053\uffb1\055\uffb1\056\uffb1\062" +
    "\uffb1\001\002\000\030\005\041\015\033\032\036\036\034" +
    "\037\035\040\040\041\044\057\037\060\032\062\042\063" +
    "\045\001\002\000\030\005\041\015\033\032\036\036\034" +
    "\037\035\040\040\041\044\057\037\060\032\062\042\063" +
    "\045\001\002\000\030\005\041\015\033\032\036\036\034" +
    "\037\035\040\040\041\044\057\037\060\032\062\042\063" +
    "\045\001\002\000\030\005\041\015\033\032\036\036\034" +
    "\037\035\040\040\041\044\057\037\060\032\062\042\063" +
    "\045\001\002\000\030\005\041\015\033\032\036\036\034" +
    "\037\035\040\040\041\044\057\037\060\032\062\042\063" +
    "\045\001\002\000\030\005\041\015\033\032\036\036\034" +
    "\037\035\040\040\041\044\057\037\060\032\062\042\063" +
    "\045\001\002\000\030\005\041\015\033\032\036\036\034" +
    "\037\035\040\040\041\044\057\037\060\032\062\042\063" +
    "\045\001\002\000\030\005\041\015\033\032\036\036\034" +
    "\037\035\040\040\041\044\057\037\060\032\062\042\063" +
    "\045\001\002\000\030\005\041\015\033\032\036\036\034" +
    "\037\035\040\040\041\044\057\037\060\032\062\042\063" +
    "\045\001\002\000\030\005\041\015\033\032\036\036\034" +
    "\037\035\040\040\041\044\057\037\060\032\062\042\063" +
    "\045\001\002\000\030\005\041\015\033\032\036\036\034" +
    "\037\035\040\040\041\044\057\037\060\032\062\042\063" +
    "\045\001\002\000\030\005\041\015\033\032\036\036\034" +
    "\037\035\040\040\041\044\057\037\060\032\062\042\063" +
    "\045\001\002\000\030\005\041\015\033\032\036\036\034" +
    "\037\035\040\040\041\044\057\037\060\032\062\042\063" +
    "\045\001\002\000\030\005\041\015\033\032\036\036\034" +
    "\037\035\040\040\041\044\057\037\060\032\062\042\063" +
    "\045\001\002\000\032\002\uffcf\004\uffcf\012\uffcf\042\uffcf" +
    "\044\uffcf\047\uffcf\050\uffcf\051\uffcf\053\uffcf\055\uffcf\056" +
    "\uffcf\062\uffcf\001\002\000\030\005\041\015\033\032\036" +
    "\036\034\037\035\040\040\041\044\057\037\060\032\062" +
    "\042\063\045\001\002\000\102\002\uffbc\004\uffbc\006\uffbc" +
    "\010\uffbc\012\uffbc\013\uffbc\014\056\015\050\016\053\017" +
    "\054\020\051\021\062\022\uffbc\023\uffbc\024\061\025\052" +
    "\026\057\027\046\030\uffbc\031\uffbc\033\uffbc\034\uffbc\035" +
    "\uffbc\042\uffbc\044\uffbc\047\uffbc\050\uffbc\051\uffbc\053\uffbc" +
    "\055\uffbc\056\uffbc\062\uffbc\001\002\000\102\002\uffc8\004" +
    "\uffc8\006\uffc8\010\uffc8\012\uffc8\013\uffc8\014\056\015\050" +
    "\016\053\017\054\020\051\021\062\022\047\023\065\024" +
    "\061\025\052\026\057\027\046\030\uffc8\031\060\033\uffc8" +
    "\034\uffc8\035\uffc8\042\uffc8\044\uffc8\047\uffc8\050\uffc8\051" +
    "\uffc8\053\uffc8\055\uffc8\056\uffc8\062\uffc8\001\002\000\102" +
    "\002\uffc6\004\uffc6\006\uffc6\010\uffc6\012\uffc6\013\uffc6\014" +
    "\uffc6\015\uffc6\016\uffc6\017\uffc6\020\051\021\uffc6\022\uffc6" +
    "\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031" +
    "\uffc6\033\uffc6\034\uffc6\035\uffc6\042\uffc6\044\uffc6\047\uffc6" +
    "\050\uffc6\051\uffc6\053\uffc6\055\uffc6\056\uffc6\062\uffc6\001" +
    "\002\000\102\002\uffc1\004\uffc1\006\uffc1\010\uffc1\012\uffc1" +
    "\013\uffc1\014\056\015\050\016\053\017\054\020\051\021" +
    "\062\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1" +
    "\030\uffc1\031\uffc1\033\uffc1\034\uffc1\035\uffc1\042\uffc1\044" +
    "\uffc1\047\uffc1\050\uffc1\051\uffc1\053\uffc1\055\uffc1\056\uffc1" +
    "\062\uffc1\001\002\000\102\002\uffbb\004\uffbb\006\uffbb\010" +
    "\uffbb\012\uffbb\013\uffbb\014\056\015\050\016\053\017\054" +
    "\020\051\021\062\022\047\023\065\024\061\025\052\026" +
    "\057\027\046\030\uffbb\031\uffbb\033\uffbb\034\uffbb\035\uffbb" +
    "\042\uffbb\044\uffbb\047\uffbb\050\uffbb\051\uffbb\053\uffbb\055" +
    "\uffbb\056\uffbb\062\uffbb\001\002\000\102\002\uffc0\004\uffc0" +
    "\006\uffc0\010\uffc0\012\uffc0\013\uffc0\014\056\015\050\016" +
    "\053\017\054\020\051\021\062\022\uffc0\023\uffc0\024\uffc0" +
    "\025\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0\033\uffc0\034" +
    "\uffc0\035\uffc0\042\uffc0\044\uffc0\047\uffc0\050\uffc0\051\uffc0" +
    "\053\uffc0\055\uffc0\056\uffc0\062\uffc0\001\002\000\102\002" +
    "\uffc4\004\uffc4\006\uffc4\010\uffc4\012\uffc4\013\uffc4\014\uffc4" +
    "\015\uffc4\016\053\017\054\020\051\021\062\022\uffc4\023" +
    "\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4" +
    "\033\uffc4\034\uffc4\035\uffc4\042\uffc4\044\uffc4\047\uffc4\050" +
    "\uffc4\051\uffc4\053\uffc4\055\uffc4\056\uffc4\062\uffc4\001\002" +
    "\000\042\014\056\015\050\016\053\017\054\020\051\021" +
    "\062\022\047\023\065\024\061\025\052\026\057\027\046" +
    "\030\063\031\060\034\055\035\076\001\002\000\030\005" +
    "\041\015\033\032\036\036\034\037\035\040\040\041\044" +
    "\057\037\060\032\062\042\063\045\001\002\000\102\002" +
    "\uffb9\004\uffb9\006\uffb9\010\uffb9\012\uffb9\013\uffb9\014\056" +
    "\015\050\016\053\017\054\020\051\021\062\022\047\023" +
    "\065\024\061\025\052\026\057\027\046\030\063\031\060" +
    "\033\uffb9\034\055\035\uffb9\042\uffb9\044\uffb9\047\uffb9\050" +
    "\uffb9\051\uffb9\053\uffb9\055\uffb9\056\uffb9\062\uffb9\001\002" +
    "\000\102\002\uffc5\004\uffc5\006\uffc5\010\uffc5\012\uffc5\013" +
    "\uffc5\014\uffc5\015\uffc5\016\uffc5\017\uffc5\020\051\021\uffc5" +
    "\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\030" +
    "\uffc5\031\uffc5\033\uffc5\034\uffc5\035\uffc5\042\uffc5\044\uffc5" +
    "\047\uffc5\050\uffc5\051\uffc5\053\uffc5\055\uffc5\056\uffc5\062" +
    "\uffc5\001\002\000\102\002\uffc7\004\uffc7\006\uffc7\010\uffc7" +
    "\012\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7\020" +
    "\051\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7" +
    "\027\uffc7\030\uffc7\031\uffc7\033\uffc7\034\uffc7\035\uffc7\042" +
    "\uffc7\044\uffc7\047\uffc7\050\uffc7\051\uffc7\053\uffc7\055\uffc7" +
    "\056\uffc7\062\uffc7\001\002\000\102\002\uffbf\004\uffbf\006" +
    "\uffbf\010\uffbf\012\uffbf\013\uffbf\014\056\015\050\016\053" +
    "\017\054\020\051\021\062\022\uffbf\023\uffbf\024\uffbf\025" +
    "\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf\033\uffbf\034\uffbf" +
    "\035\uffbf\042\uffbf\044\uffbf\047\uffbf\050\uffbf\051\uffbf\053" +
    "\uffbf\055\uffbf\056\uffbf\062\uffbf\001\002\000\102\002\uffc2" +
    "\004\uffc2\006\uffc2\010\uffc2\012\uffc2\013\uffc2\014\uffc2\015" +
    "\uffc2\016\uffc2\017\uffc2\020\051\021\uffc2\022\uffc2\023\uffc2" +
    "\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\033" +
    "\uffc2\034\uffc2\035\uffc2\042\uffc2\044\uffc2\047\uffc2\050\uffc2" +
    "\051\uffc2\053\uffc2\055\uffc2\056\uffc2\062\uffc2\001\002\000" +
    "\102\002\uffc3\004\uffc3\006\uffc3\010\uffc3\012\uffc3\013\uffc3" +
    "\014\uffc3\015\uffc3\016\053\017\054\020\051\021\062\022" +
    "\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3" +
    "\031\uffc3\033\uffc3\034\uffc3\035\uffc3\042\uffc3\044\uffc3\047" +
    "\uffc3\050\uffc3\051\uffc3\053\uffc3\055\uffc3\056\uffc3\062\uffc3" +
    "\001\002\000\102\002\uffbd\004\uffbd\006\uffbd\010\uffbd\012" +
    "\uffbd\013\uffbd\014\056\015\050\016\053\017\054\020\051" +
    "\021\062\022\uffbd\023\uffbd\024\061\025\052\026\057\027" +
    "\046\030\uffbd\031\uffbd\033\uffbd\034\uffbd\035\uffbd\042\uffbd" +
    "\044\uffbd\047\uffbd\050\uffbd\051\uffbd\053\uffbd\055\uffbd\056" +
    "\uffbd\062\uffbd\001\002\000\102\002\uffbe\004\uffbe\006\uffbe" +
    "\010\uffbe\012\uffbe\013\uffbe\014\056\015\050\016\053\017" +
    "\054\020\051\021\062\022\uffbe\023\uffbe\024\uffbe\025\uffbe" +
    "\026\uffbe\027\uffbe\030\uffbe\031\uffbe\033\uffbe\034\uffbe\035" +
    "\uffbe\042\uffbe\044\uffbe\047\uffbe\050\uffbe\051\uffbe\053\uffbe" +
    "\055\uffbe\056\uffbe\062\uffbe\001\002\000\034\005\041\007" +
    "\126\013\125\015\033\032\036\036\034\037\035\040\040" +
    "\041\044\057\037\060\032\062\042\063\045\001\002\000" +
    "\104\002\uffed\004\uffed\006\uffed\007\uffed\010\uffed\012\uffed" +
    "\013\uffed\014\uffed\015\uffed\016\uffed\017\uffed\020\uffed\021" +
    "\uffed\022\uffed\023\uffed\024\uffed\025\uffed\026\uffed\027\uffed" +
    "\030\uffed\031\uffed\033\uffed\034\uffed\035\uffed\042\uffed\044" +
    "\uffed\047\uffed\050\uffed\051\uffed\053\uffed\055\uffed\056\uffed" +
    "\062\uffed\001\002\000\032\005\041\006\115\015\033\032" +
    "\036\036\034\037\035\040\040\041\044\057\037\060\032" +
    "\062\042\063\045\001\002\000\104\002\uffb4\004\uffb4\006" +
    "\uffb4\007\107\010\uffb4\012\uffb4\013\uffb4\014\uffb4\015\uffb4" +
    "\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4\024" +
    "\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4\033\uffb4" +
    "\034\uffb4\035\uffb4\042\uffb4\044\uffb4\047\uffb4\050\uffb4\051" +
    "\uffb4\053\uffb4\055\uffb4\056\uffb4\062\uffb4\001\002\000\104" +
    "\002\uffee\004\uffee\006\uffee\007\uffee\010\uffee\012\uffee\013" +
    "\uffee\014\uffee\015\uffee\016\uffee\017\uffee\020\uffee\021\uffee" +
    "\022\uffee\023\uffee\024\uffee\025\uffee\026\uffee\027\uffee\030" +
    "\uffee\031\uffee\033\uffee\034\uffee\035\uffee\042\uffee\044\uffee" +
    "\047\uffee\050\uffee\051\uffee\053\uffee\055\uffee\056\uffee\062" +
    "\uffee\001\002\000\006\006\uffcc\013\uffcc\001\002\000\102" +
    "\002\uffb7\004\uffb7\006\uffb7\010\uffb7\012\uffb7\013\uffb7\014" +
    "\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7" +
    "\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031" +
    "\uffb7\033\uffb7\034\uffb7\035\uffb7\042\uffb7\044\uffb7\047\uffb7" +
    "\050\uffb7\051\uffb7\053\uffb7\055\uffb7\056\uffb7\062\uffb7\001" +
    "\002\000\046\006\uffca\013\uffca\014\056\015\050\016\053" +
    "\017\054\020\051\021\062\022\047\023\065\024\061\025" +
    "\052\026\057\027\046\030\063\031\060\033\123\034\055" +
    "\001\002\000\006\006\121\013\120\001\002\000\030\005" +
    "\041\015\033\032\036\036\034\037\035\040\040\041\044" +
    "\057\037\060\032\062\042\063\045\001\002\000\102\002" +
    "\uffb6\004\uffb6\006\uffb6\010\uffb6\012\uffb6\013\uffb6\014\uffb6" +
    "\015\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023" +
    "\uffb6\024\uffb6\025\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6" +
    "\033\uffb6\034\uffb6\035\uffb6\042\uffb6\044\uffb6\047\uffb6\050" +
    "\uffb6\051\uffb6\053\uffb6\055\uffb6\056\uffb6\062\uffb6\001\002" +
    "\000\006\006\uffcd\013\uffcd\001\002\000\030\005\041\015" +
    "\033\032\036\036\034\037\035\040\040\041\044\057\037" +
    "\060\032\062\042\063\045\001\002\000\044\006\uffcb\013" +
    "\uffcb\014\056\015\050\016\053\017\054\020\051\021\062" +
    "\022\047\023\065\024\061\025\052\026\057\027\046\030" +
    "\063\031\060\034\055\001\002\000\030\005\041\015\033" +
    "\032\036\036\034\037\035\040\040\041\044\057\037\060" +
    "\032\062\042\063\045\001\002\000\030\005\041\015\033" +
    "\032\036\036\034\037\035\040\040\041\044\057\037\060" +
    "\032\062\042\063\045\001\002\000\044\010\131\013\130" +
    "\014\056\015\050\016\053\017\054\020\051\021\062\022" +
    "\047\023\065\024\061\025\052\026\057\027\046\030\063" +
    "\031\060\034\055\001\002\000\032\005\041\010\132\015" +
    "\033\032\036\036\034\037\035\040\040\041\044\057\037" +
    "\060\032\062\042\063\045\001\002\000\104\002\uffec\004" +
    "\uffec\006\uffec\007\uffec\010\uffec\012\uffec\013\uffec\014\uffec" +
    "\015\uffec\016\uffec\017\uffec\020\uffec\021\uffec\022\uffec\023" +
    "\uffec\024\uffec\025\uffec\026\uffec\027\uffec\030\uffec\031\uffec" +
    "\033\uffec\034\uffec\035\uffec\042\uffec\044\uffec\047\uffec\050" +
    "\uffec\051\uffec\053\uffec\055\uffec\056\uffec\062\uffec\001\002" +
    "\000\104\002\uffe9\004\uffe9\006\uffe9\007\uffe9\010\uffe9\012" +
    "\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9" +
    "\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027" +
    "\uffe9\030\uffe9\031\uffe9\033\uffe9\034\uffe9\035\uffe9\042\uffe9" +
    "\044\uffe9\047\uffe9\050\uffe9\051\uffe9\053\uffe9\055\uffe9\056" +
    "\uffe9\062\uffe9\001\002\000\042\010\134\014\056\015\050" +
    "\016\053\017\054\020\051\021\062\022\047\023\065\024" +
    "\061\025\052\026\057\027\046\030\063\031\060\034\055" +
    "\001\002\000\104\002\uffea\004\uffea\006\uffea\007\uffea\010" +
    "\uffea\012\uffea\013\uffea\014\uffea\015\uffea\016\uffea\017\uffea" +
    "\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea\026" +
    "\uffea\027\uffea\030\uffea\031\uffea\033\uffea\034\uffea\035\uffea" +
    "\042\uffea\044\uffea\047\uffea\050\uffea\051\uffea\053\uffea\055" +
    "\uffea\056\uffea\062\uffea\001\002\000\042\010\136\014\056" +
    "\015\050\016\053\017\054\020\051\021\062\022\047\023" +
    "\065\024\061\025\052\026\057\027\046\030\063\031\060" +
    "\034\055\001\002\000\004\010\137\001\002\000\104\002" +
    "\uffeb\004\uffeb\006\uffeb\007\uffeb\010\uffeb\012\uffeb\013\uffeb" +
    "\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022" +
    "\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb" +
    "\031\uffeb\033\uffeb\034\uffeb\035\uffeb\042\uffeb\044\uffeb\047" +
    "\uffeb\050\uffeb\051\uffeb\053\uffeb\055\uffeb\056\uffeb\062\uffeb" +
    "\001\002\000\042\010\141\014\056\015\050\016\053\017" +
    "\054\020\051\021\062\022\047\023\065\024\061\025\052" +
    "\026\057\027\046\030\063\031\060\034\055\001\002\000" +
    "\104\002\uffe8\004\uffe8\006\uffe8\007\uffe8\010\uffe8\012\uffe8" +
    "\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021" +
    "\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8" +
    "\030\uffe8\031\uffe8\033\uffe8\034\uffe8\035\uffe8\042\uffe8\044" +
    "\uffe8\047\uffe8\050\uffe8\051\uffe8\053\uffe8\055\uffe8\056\uffe8" +
    "\062\uffe8\001\002\000\042\006\143\014\056\015\050\016" +
    "\053\017\054\020\051\021\062\022\047\023\065\024\061" +
    "\025\052\026\057\027\046\030\063\031\060\034\055\001" +
    "\002\000\102\002\uffb8\004\uffb8\006\uffb8\010\uffb8\012\uffb8" +
    "\013\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021" +
    "\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8" +
    "\030\uffb8\031\uffb8\033\uffb8\034\uffb8\035\uffb8\042\uffb8\044" +
    "\uffb8\047\uffb8\050\uffb8\051\uffb8\053\uffb8\055\uffb8\056\uffb8" +
    "\062\uffb8\001\002\000\102\002\uffba\004\uffba\006\uffba\010" +
    "\uffba\012\uffba\013\uffba\014\uffba\015\uffba\016\uffba\017\uffba" +
    "\020\uffba\021\uffba\022\uffba\023\uffba\024\uffba\025\uffba\026" +
    "\uffba\027\uffba\030\uffba\031\uffba\033\uffba\034\uffba\035\uffba" +
    "\042\uffba\044\uffba\047\uffba\050\uffba\051\uffba\053\uffba\055" +
    "\uffba\056\uffba\062\uffba\001\002\000\102\002\uffc9\004\uffc9" +
    "\006\uffc9\010\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9\016" +
    "\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9" +
    "\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\033\uffc9\034" +
    "\uffc9\035\uffc9\042\uffc9\044\uffc9\047\uffc9\050\uffc9\051\uffc9" +
    "\053\uffc9\055\uffc9\056\uffc9\062\uffc9\001\002\000\030\005" +
    "\041\015\033\032\036\036\034\037\035\040\040\041\044" +
    "\057\037\060\032\062\042\063\045\001\002\000\042\006" +
    "\150\014\056\015\050\016\053\017\054\020\051\021\062" +
    "\022\047\023\065\024\061\025\052\026\057\027\046\030" +
    "\063\031\060\034\055\001\002\000\004\011\152\001\002" +
    "\000\030\002\uffd2\012\uffd2\042\uffd2\044\uffd2\047\uffd2\050" +
    "\uffd2\051\uffd2\053\uffd2\055\uffd2\056\uffd2\062\uffd2\001\002" +
    "\000\026\012\154\042\004\044\011\047\026\050\007\051" +
    "\015\053\016\055\027\056\030\062\020\001\002\000\026" +
    "\012\155\042\004\044\011\047\026\050\007\051\015\053" +
    "\016\055\027\056\030\062\020\001\002\000\032\002\ufffb" +
    "\012\ufffb\042\ufffb\043\ufffb\044\ufffb\047\ufffb\050\ufffb\051" +
    "\ufffb\053\ufffb\055\ufffb\056\ufffb\062\ufffb\001\002\000\032" +
    "\002\ufffc\012\ufffc\042\ufffc\043\ufffc\044\ufffc\047\ufffc\050" +
    "\ufffc\051\ufffc\053\ufffc\055\ufffc\056\ufffc\062\ufffc\001\002" +
    "\000\030\002\ufffe\012\ufffe\042\ufffe\044\ufffe\047\ufffe\050" +
    "\ufffe\051\ufffe\053\ufffe\055\ufffe\056\ufffe\062\ufffe\001\002" +
    "\000\030\002\uffd9\012\uffd9\042\uffd9\044\uffd9\047\uffd9\050" +
    "\uffd9\051\uffd9\053\uffd9\055\uffd9\056\uffd9\062\uffd9\001\002" +
    "\000\030\002\uffdd\012\uffdd\042\uffdd\044\uffdd\047\uffdd\050" +
    "\uffdd\051\uffdd\053\uffdd\055\uffdd\056\uffdd\062\uffdd\001\002" +
    "\000\006\007\107\033\211\001\002\000\032\005\041\015" +
    "\033\032\036\036\034\037\035\040\040\041\044\054\172" +
    "\057\037\060\032\062\042\063\045\001\002\000\032\005" +
    "\041\006\164\015\033\032\036\036\034\037\035\040\040" +
    "\041\044\057\037\060\032\062\042\063\045\001\002\000" +
    "\032\002\uffd7\004\uffd7\012\uffd7\042\uffd7\044\uffd7\047\uffd7" +
    "\050\uffd7\051\uffd7\053\uffd7\055\uffd7\056\uffd7\062\uffd7\001" +
    "\002\000\006\006\166\013\120\001\002\000\034\002\uffd6" +
    "\004\uffd6\012\uffd6\033\167\042\uffd6\044\uffd6\047\uffd6\050" +
    "\uffd6\051\uffd6\053\uffd6\055\uffd6\056\uffd6\062\uffd6\001\002" +
    "\000\030\005\041\015\033\032\036\036\034\037\035\040" +
    "\040\041\044\057\037\060\032\062\042\063\045\001\002" +
    "\000\070\002\ufff3\004\171\012\ufff3\014\056\015\050\016" +
    "\053\017\054\020\051\021\062\022\047\023\065\024\061" +
    "\025\052\026\057\027\046\030\063\031\060\034\055\042" +
    "\ufff3\044\ufff3\047\ufff3\050\ufff3\051\ufff3\053\ufff3\055\ufff3" +
    "\056\ufff3\062\ufff3\001\002\000\030\002\ufff0\012\ufff0\042" +
    "\ufff0\044\ufff0\047\ufff0\050\ufff0\051\ufff0\053\ufff0\055\ufff0" +
    "\056\ufff0\062\ufff0\001\002\000\004\005\175\001\002\000" +
    "\070\002\ufff4\004\174\012\ufff4\014\056\015\050\016\053" +
    "\017\054\020\051\021\062\022\047\023\065\024\061\025" +
    "\052\026\057\027\046\030\063\031\060\034\055\042\ufff4" +
    "\044\ufff4\047\ufff4\050\ufff4\051\ufff4\053\ufff4\055\ufff4\056" +
    "\ufff4\062\ufff4\001\002\000\030\002\ufff1\012\ufff1\042\ufff1" +
    "\044\ufff1\047\ufff1\050\ufff1\051\ufff1\053\ufff1\055\ufff1\056" +
    "\ufff1\062\ufff1\001\002\000\006\006\200\062\176\001\002" +
    "\000\010\006\ufff6\013\ufff6\033\207\001\002\000\006\006" +
    "\204\013\203\001\002\000\004\011\152\001\002\000\006" +
    "\006\ufff7\013\ufff7\001\002\000\030\002\ufff9\012\ufff9\042" +
    "\ufff9\044\ufff9\047\ufff9\050\ufff9\051\ufff9\053\ufff9\055\ufff9" +
    "\056\ufff9\062\ufff9\001\002\000\004\062\176\001\002\000" +
    "\004\011\152\001\002\000\030\002\ufffa\012\ufffa\042\ufffa" +
    "\044\ufffa\047\ufffa\050\ufffa\051\ufffa\053\ufffa\055\ufffa\056" +
    "\ufffa\062\ufffa\001\002\000\006\006\ufff8\013\ufff8\001\002" +
    "\000\030\005\041\015\033\032\036\036\034\037\035\040" +
    "\040\041\044\057\037\060\032\062\042\063\045\001\002" +
    "\000\044\006\ufff5\013\ufff5\014\056\015\050\016\053\017" +
    "\054\020\051\021\062\022\047\023\065\024\061\025\052" +
    "\026\057\027\046\030\063\031\060\034\055\001\002\000" +
    "\030\005\041\015\033\032\036\036\034\037\035\040\040" +
    "\041\044\057\037\060\032\062\042\063\045\001\002\000" +
    "\070\002\ufff2\004\213\012\ufff2\014\056\015\050\016\053" +
    "\017\054\020\051\021\062\022\047\023\065\024\061\025" +
    "\052\026\057\027\046\030\063\031\060\034\055\042\ufff2" +
    "\044\ufff2\047\ufff2\050\ufff2\051\ufff2\053\ufff2\055\ufff2\056" +
    "\ufff2\062\ufff2\001\002\000\030\002\uffef\012\uffef\042\uffef" +
    "\044\uffef\047\uffef\050\uffef\051\uffef\053\uffef\055\uffef\056" +
    "\uffef\062\uffef\001\002\000\030\002\uffdb\012\uffdb\042\uffdb" +
    "\044\uffdb\047\uffdb\050\uffdb\051\uffdb\053\uffdb\055\uffdb\056" +
    "\uffdb\062\uffdb\001\002\000\004\062\216\001\002\000\004" +
    "\052\217\001\002\000\030\005\041\015\033\032\036\036" +
    "\034\037\035\040\040\041\044\057\037\060\032\062\042" +
    "\063\045\001\002\000\042\006\221\014\056\015\050\016" +
    "\053\017\054\020\051\021\062\022\047\023\065\024\061" +
    "\025\052\026\057\027\046\030\063\031\060\034\055\001" +
    "\002\000\004\011\152\001\002\000\030\002\uffd1\012\uffd1" +
    "\042\uffd1\044\uffd1\047\uffd1\050\uffd1\051\uffd1\053\uffd1\055" +
    "\uffd1\056\uffd1\062\uffd1\001\002\000\030\002\uffda\012\uffda" +
    "\042\uffda\044\uffda\047\uffda\050\uffda\051\uffda\053\uffda\055" +
    "\uffda\056\uffda\062\uffda\001\002\000\030\002\uffdc\012\uffdc" +
    "\042\uffdc\044\uffdc\047\uffdc\050\uffdc\051\uffdc\053\uffdc\055" +
    "\uffdc\056\uffdc\062\uffdc\001\002\000\004\002\001\001\002" +
    "\000\004\047\227\001\002\000\004\005\230\001\002\000" +
    "\030\005\041\015\033\032\036\036\034\037\035\040\040" +
    "\041\044\057\037\060\032\062\042\063\045\001\002\000" +
    "\042\006\232\014\056\015\050\016\053\017\054\020\051" +
    "\021\062\022\047\023\065\024\061\025\052\026\057\027" +
    "\046\030\063\031\060\034\055\001\002\000\032\002\uffd0" +
    "\004\uffd0\012\uffd0\042\uffd0\044\uffd0\047\uffd0\050\uffd0\051" +
    "\uffd0\053\uffd0\055\uffd0\056\uffd0\062\uffd0\001\002\000\030" +
    "\005\041\015\033\032\036\036\034\037\035\040\040\041" +
    "\044\057\037\060\032\062\042\063\045\001\002\000\042" +
    "\006\235\014\056\015\050\016\053\017\054\020\051\021" +
    "\062\022\047\023\065\024\061\025\052\026\057\027\046" +
    "\030\063\031\060\034\055\001\002\000\004\011\152\001" +
    "\002\000\032\002\uffd5\012\uffd5\042\uffd5\043\237\044\uffd5" +
    "\047\uffd5\050\uffd5\051\uffd5\053\uffd5\055\uffd5\056\uffd5\062" +
    "\uffd5\001\002\000\006\011\152\042\004\001\002\000\030" +
    "\002\uffd4\012\uffd4\042\uffd4\044\uffd4\047\uffd4\050\uffd4\051" +
    "\uffd4\053\uffd4\055\uffd4\056\uffd4\062\uffd4\001\002\000\030" +
    "\002\uffd3\012\uffd3\042\uffd3\044\uffd3\047\uffd3\050\uffd3\051" +
    "\uffd3\053\uffd3\055\uffd3\056\uffd3\062\uffd3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\237\000\032\002\013\003\007\004\004\005\012\007" +
    "\016\010\022\011\021\012\005\013\011\016\024\020\020" +
    "\021\023\001\001\000\002\001\001\000\024\005\155\007" +
    "\016\010\022\011\021\012\005\013\011\016\024\020\020" +
    "\021\023\001\001\000\002\001\001\000\004\006\225\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\022\160\023\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\042\001" +
    "\001\000\002\001\001\000\004\015\144\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\143\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\141\001\001" +
    "\000\006\022\111\023\107\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\105\001\001" +
    "\000\004\015\104\001\001\000\004\015\103\001\001\000" +
    "\004\015\102\001\001\000\004\015\101\001\001\000\004" +
    "\015\100\001\001\000\004\015\077\001\001\000\004\015" +
    "\074\001\001\000\004\015\073\001\001\000\004\015\072" +
    "\001\001\000\004\015\071\001\001\000\004\015\070\001" +
    "\001\000\004\015\067\001\001\000\004\015\066\001\001" +
    "\000\002\001\001\000\004\015\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\126\001\001\000\002\001\001\000" +
    "\010\014\116\015\115\017\113\001\001\000\004\023\112" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\015\115" +
    "\017\121\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\123\001\001\000\002\001\001\000\004\015\137" +
    "\001\001\000\004\015\134\001\001\000\002\001\001\000" +
    "\004\015\132\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\146\001\001\000\002" +
    "\001\001\000\004\006\150\001\001\000\002\001\001\000" +
    "\026\004\152\005\012\007\016\010\022\011\021\012\005" +
    "\013\011\016\024\020\020\021\023\001\001\000\024\005" +
    "\155\007\016\010\022\011\021\012\005\013\011\016\024" +
    "\020\020\021\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\112\001\001\000\004\015\172\001\001\000" +
    "\010\014\164\015\115\017\113\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\167\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\024\176\025" +
    "\200\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\201\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\205\001\001\000\004\006\204\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\207\001\001\000" +
    "\002\001\001\000\004\015\211\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\217\001\001\000\002\001\001" +
    "\000\004\006\221\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\230\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\233\001\001\000\002" +
    "\001\001\000\004\006\235\001\001\000\002\001\001\000" +
    "\006\006\237\007\240\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



public static AST arbol;


    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("ERROR Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
        Ventana pp = (Ventana)olc2.p1_201504242.OLC2P1_201504242.ven.ggetVentana();
        pp.listaError.add(new JError("Sintactico",(s.left),s.right,"Identificador "+s.value  +" no reconocido."));
    } 
 
    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("ERROR síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
        Ventana pp = (Ventana)olc2.p1_201504242.OLC2P1_201504242.ven.ggetVentana();
        pp.listaError.add(new JError("Sintactico No recuperado", s.left, s.right, "Identificador "+s.value  +" no reconocido."));
    }  


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= ini 
            {
              Object RESULT =null;
		
        System.out.println("**************** TERMINO cup GRAMATICA*********************");
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ini ::= instrucciones 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> e = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        parser.arbol = new AST(e);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= instrucciones instruccion 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = a;
        RESULT.addLast(b);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instrucciones ::= instruccion 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new LinkedList();
        RESULT.addLast(a);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BLOQUE_SENT ::= LLAIZQ instrucciones LLADER 
            {
              LinkedList<NodoAST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> e = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = e;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE_SENT",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BLOQUE_SENT ::= LLAIZQ LLADER 
            {
              LinkedList<NodoAST> RESULT =null;
		
        RESULT = new LinkedList();
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE_SENT",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLA_FUN ::= ID igual Tfuntion PARIZQ formal_parameters PARDER BLOQUE_SENT 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Simbolo> b = (LinkedList<Simbolo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> c = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
        //String id,Rol rol,LinkedList<Simbolo> parametrosFormales, LinkedList<NodoAST> sentencias,int,int
        RESULT  = new Funcion(a.toString()+"_"+b.size(),Rol.FUNCION,b,c,aleft,aright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLA_FUN",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECLA_FUN ::= ID igual Tfuntion PARIZQ PARDER BLOQUE_SENT 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> c = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
        //String id,Rol rol, LinkedList<NodoAST> sentencias,int,int
        RESULT  = new Funcion(a.toString()+"_0",Rol.FUNCION,c,aleft,aright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLA_FUN",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // formal_parameters ::= formal_parameters COMA formal_parameter 
            {
              LinkedList<Simbolo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Simbolo> a = (LinkedList<Simbolo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Simbolo b = (Simbolo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
        RESULT = a;
        RESULT.addLast(b);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("formal_parameters",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // formal_parameters ::= formal_parameter 
            {
              LinkedList<Simbolo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Simbolo a = (Simbolo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new LinkedList();
        RESULT.addLast(a);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("formal_parameters",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // formal_parameter ::= ID 
            {
              Simbolo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Simbolo(b.toString(),Rol.VECTOR);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("formal_parameter",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // formal_parameter ::= ID igual EXP 
            {
              Simbolo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Simbolo(b.toString(),Rol.VECTOR,a);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("formal_parameter",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ASIGNACION ::= ID igual EXP 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
        RESULT =  new Asignacion(new Identificador(a.toString(),aleft,aright,true),b,bleft,bright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ASIGNACION ::= ID PARIZQ LISTA_EXP PARDER igual EXP 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
        
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ASIGNACION ::= ID DIMENSION igual EXP 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<nodoExp> b = (LinkedList<nodoExp>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
        //ACCESO 
        //Identificador(String val,LinkedList<nodoExp> lista,boolean isAssign,int linea,int col)
        //Asignacion(Expresion variable, Expresion der, int linea, int col)
        Identificador ident = new Identificador(a.toString(),b,true,aleft,aright);
        RESULT =  new Asignacion(ident,c,cleft,cright);

    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ASIGNACION ::= ID igual EXP PTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        //RESULT = new Asignacion(new Var(a),b,aright,aleft);
        RESULT =  new Asignacion(new Identificador(a.toString(),aleft,aright,true),b,bleft,bright);

    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ASIGNACION ::= ID PARIZQ LISTA_EXP PARDER igual EXP PTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ASIGNACION ::= ID DIMENSION igual EXP PTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<nodoExp> b = (LinkedList<nodoExp>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        Identificador ident = new Identificador(a.toString(),b,true,aleft,aright);
        RESULT =  new Asignacion(ident,c,cleft,cright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DIMENSION ::= DIMENSION OPC_ACCESO 
            {
              LinkedList<nodoExp> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<nodoExp> a = (LinkedList<nodoExp>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		nodoExp b = (nodoExp)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = a;
        RESULT.addLast(b);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DIMENSION",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DIMENSION ::= OPC_ACCESO 
            {
              LinkedList<nodoExp> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		nodoExp a = (nodoExp)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new LinkedList();
        RESULT.addLast(a);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DIMENSION",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // OPC_ACCESO ::= CORIZQ EXP CORDER 
            {
              nodoExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new nodoExp(a,Acc.tipo1);   
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPC_ACCESO",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // OPC_ACCESO ::= CORIZQ CORIZQ EXP CORDER CORDER 
            {
              nodoExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new nodoExp(a,Acc.tipo2);   
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPC_ACCESO",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // OPC_ACCESO ::= CORIZQ EXP COMA EXP CORDER 
            {
              nodoExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new nodoExp(a,b,Acc.m1);    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPC_ACCESO",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // OPC_ACCESO ::= CORIZQ EXP COMA CORDER 
            {
              nodoExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new nodoExp(a,Acc.m2);      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPC_ACCESO",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OPC_ACCESO ::= CORIZQ COMA EXP CORDER 
            {
              nodoExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new nodoExp(a,Acc.m3);      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPC_ACCESO",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instruccion ::= DECLA_FUN 
            {
              NodoAST RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = ins;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instruccion ::= ASIGNACION 
            {
              NodoAST RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = ins;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instruccion ::= SENTENCIA_IF 
            {
              NodoAST RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = ins;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // instruccion ::= SENTENCIA_WHILE 
            {
              NodoAST RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = ins;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // instruccion ::= SENTENCIA_FOR 
            {
              NodoAST RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = ins;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // instruccion ::= SENTENCIA_DOWHILE 
            {
              NodoAST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = e; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // instruccion ::= Tbreak 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
            RESULT = new Break(aleft,aright);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // instruccion ::= Tcontinue 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
            RESULT = new Continue(aleft,aright);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // instruccion ::= SENTENCIA_RETURN 
            {
              NodoAST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
            RESULT = e;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // instruccion ::= SENTENCIA_LLAMADA 
            {
              NodoAST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST e = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
            RESULT = e;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // instruccion ::= SENTENCIA_DOWHILE PTCOMA 
            {
              NodoAST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = e; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // instruccion ::= Tbreak PTCOMA 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT = new Break(aleft,aright);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // instruccion ::= Tcontinue PTCOMA 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 
            RESULT = new Continue(aleft,aright);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // instruccion ::= SENTENCIA_RETURN PTCOMA 
            {
              NodoAST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 
            RESULT = e;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // instruccion ::= SENTENCIA_LLAMADA PTCOMA 
            {
              NodoAST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		NodoAST e = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 
            RESULT = e;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // instruccion ::= fantasmita 
            {
              NodoAST RESULT =null;
		 
            RESULT = new fantasmita();
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIA_LLAMADA ::= ID PARIZQ PARDER 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 
        RESULT = new Llama(a,aright,aleft);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_LLAMADA",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIA_LLAMADA ::= ID PARIZQ LISTA_EXP PARDER 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 
        if(a.equalsIgnoreCase("c")){
            RESULT = new funcionC(b,aleft,aright);
        }else if(a.equalsIgnoreCase("list")){
            RESULT = new GenerarList(b,aleft,aright);
        }else if(a.equalsIgnoreCase("print")){
            RESULT = new Print(b,aleft,aright);
        }else if(a.equalsIgnoreCase("matrix")){
            RESULT = new FuncionMatrix(b,aleft,aright);
        }else if(a.equalsIgnoreCase("typeof")){
            RESULT = new Typeof(b,aleft,aright);
        }else if(a.equalsIgnoreCase("length")){
            RESULT = new Length(b,aleft,aright);
        }else if(a.equalsIgnoreCase("nCol")){
            RESULT = new nMatrix("ncol",b,aleft,aright);
        }else if(a.equalsIgnoreCase("nRow")){
            RESULT = new nMatrix("nrow",b,aleft,aright);
        }else if(a.equalsIgnoreCase("StringLength")){
            RESULT = new Fstring(1,b,aleft,aright);
        }else if(a.equalsIgnoreCase("remove")){
            RESULT = new Fstring(2,b,aleft,aright);
        }else if(a.equalsIgnoreCase("toLowerCase")){
            RESULT = new Fstring(3,b,aleft,aright);
        }else if(a.equalsIgnoreCase("toUpperCase")){
            RESULT = new Fstring(4,b,aleft,aright);
        }else if(a.equalsIgnoreCase("trunk")){
            RESULT = new Fnum(1,b,aleft,aright);
        }else if(a.equalsIgnoreCase("round")){
            RESULT = new Fnum(2,b,aleft,aright);
        }else if(a.equalsIgnoreCase("mean")){
            RESULT = new Fnum(3,b,aleft,aright);
        }else if(a.equalsIgnoreCase("median")){
            RESULT = new Fnum(4,b,aleft,aright);
        }else if(a.equalsIgnoreCase("mode")){
            RESULT = new Fnum(5,b,aleft,aright);
        }else if(a.equalsIgnoreCase("pie")){
                RESULT = new grafPie(b,aleft,aright);
        }else if(a.equalsIgnoreCase("barplot")){
            RESULT = new grafBarras(b,aleft,aright);
        }else if(a.equalsIgnoreCase("hist")){
               RESULT = new grafHistograma(b,aleft,aright);
        }else if(a.equalsIgnoreCase("plot")){
            RESULT = new grafLineas(b,aleft,aright);                 
        }else{
            RESULT = new Llama(a,b,aleft,aright);
        }
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_LLAMADA",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIA_IF ::= Tif PARIZQ EXP PARDER BLOQUE_SENT 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new If(b,a,aleft);

        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCIA_IF ::= Tif PARIZQ EXP PARDER BLOQUE_SENT Telse BLOQUE_SENT 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> c = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new If(b,a,c,aleft);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTENCIA_IF ::= Tif PARIZQ EXP PARDER BLOQUE_SENT Telse SENTENCIA_IF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new If(b,a,c,aleft);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCIA_WHILE ::= Twhile PARIZQ EXP PARDER BLOQUE_SENT 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new While(b,a,aright,aleft);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCIA_FOR ::= Tfor PARIZQ ID Tin EXP PARDER BLOQUE_SENT 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> c = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            Identificador id = new Identificador(valor,valorleft,valorright,false);                    
            RESULT = new For(id,c,b,aleft,aright);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENTENCIA_DOWHILE ::= Tdo BLOQUE_SENT Twhile PARIZQ EXP PARDER 
            {
              Instruccion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT = new DoWhile(b,a,cleft,cright);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_DOWHILE",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTENCIA_RETURN ::= Treturn PARIZQ EXP PARDER 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = new Return(a,aleft,aright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RETURN",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENTENCIA_RETURN ::= Treturn 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Return(aleft,aright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RETURN",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // LISTA_EXP ::= LISTA_EXP COMA B 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = a;
        RESULT.addLast(b);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_EXP",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // LISTA_EXP ::= B 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new LinkedList();
        RESULT.addLast(a);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_EXP",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // B ::= EXP igual EXP 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("B",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // B ::= EXP 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = a;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("B",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXP ::= MENOS EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Aritmetica(a,Operador.MENOS_UNARIO,aright,aleft); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXP ::= EXP Tor EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Logica(a, b, Operador.OR,aright,aleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXP ::= EXP POR EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Aritmetica(a, b, Operador.MULTIPLICACION,aright,aleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXP ::= EXP MODULO EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Aritmetica(a, b, Operador.MODULO,aright,aleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXP ::= EXP DIVIDIDO EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Aritmetica(a, b, Operador.DIVISION,aright,aleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXP ::= EXP MAS EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Aritmetica(a, b, Operador.SUMA,aright,aleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXP ::= EXP MENOS EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Aritmetica(a, b, Operador.RESTA,aright,aleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXP ::= EXP POTENCIA EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Aritmetica(a, b, Operador.POTENCIA,aright,aleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXP ::= EXP MAYOR EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Relacional(a, b, Operador.MAYOR_QUE,aright,aleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXP ::= EXP MAYORIGUAL EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Relacional(a, b, Operador.MAYOR_IGUAL,aright,aleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXP ::= EXP MENOR EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Relacional(a, b, Operador.MENOR_QUE,aright,aleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXP ::= EXP MENORIGUAL EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Relacional(a, b, Operador.MENOR_IGUAL,aright,aleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXP ::= EXP IGUALDAD EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Relacional(a, b, Operador.IGUAL_IGUAL,aright,aleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXP ::= EXP DIFERENTE EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Relacional(a, b, Operador.DIFERENTE_QUE,aright,aleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXP ::= EXP Tand EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Logica(a, b, Operador.AND,aright,aleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXP ::= Tnot EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= new Logica(a,Operador.NOT,aright,aleft); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXP ::= EXP ternario EXP dospuntos EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= new Ternaria(a, b,c,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXP ::= PARIZQ EXP PARDER 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT =a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXP ::= ID PARIZQ PARDER 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		RESULT = new Llama(a,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXP ::= ID PARIZQ LISTA_EXP PARDER 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 
        if(a.equalsIgnoreCase("c")){
            RESULT = new funcionC(b,aleft,aright);
        }else if(a.equalsIgnoreCase("list")){
            RESULT = new GenerarList(b,aleft,aright);
        }else if(a.equalsIgnoreCase("matrix")){
            RESULT = new FuncionMatrix(b,aleft,aright);
        }else if(a.equalsIgnoreCase("typeof")){
            RESULT = new Typeof(b,aleft,aright);
        }else if(a.equalsIgnoreCase("length")){
            RESULT = new Length(b,aleft,aright);
        }else if(a.equalsIgnoreCase("nCol")){
            RESULT = new nMatrix("ncol",b,aleft,aright);
        }else if(a.equalsIgnoreCase("nRow")){
            RESULT = new nMatrix("nrow",b,aleft,aright);
        }else if(a.equalsIgnoreCase("StringLength")){
            RESULT = new Fstring(1,b,aleft,aright);
        }else if(a.equalsIgnoreCase("remove")){
            RESULT = new Fstring(2,b,aleft,aright);
        }else if(a.equalsIgnoreCase("toLowerCase")){
            RESULT = new Fstring(3,b,aleft,aright);
        }else if(a.equalsIgnoreCase("toUpperCase")){
            RESULT = new Fstring(4,b,aleft,aright);
        }else if(a.equalsIgnoreCase("trunk")){
            RESULT = new Fnum(1,b,aleft,aright);
        }else if(a.equalsIgnoreCase("round")){
            RESULT = new Fnum(2,b,aleft,aright);
        }else if(a.equalsIgnoreCase("mean")){
            RESULT = new Fnum(3,b,aleft,aright);
        }else if(a.equalsIgnoreCase("median")){
            RESULT = new Fnum(4,b,aleft,aright);
        }else if(a.equalsIgnoreCase("mode")){
            RESULT = new Fnum(5,b,aleft,aright);
        }else{
            RESULT = new Llama(a,b,aleft,aright);
        }
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXP ::= ID 
            {
              Expresion RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Identificador(valor,valorleft,valorright,false);                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXP ::= ID DIMENSION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<nodoExp> b = (LinkedList<nodoExp>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT =  new Identificador(a.toString(),b,false,aleft,aright);                   
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXP ::= ENTERO 
            {
              Expresion RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer valor = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Literal((Object)valor, new Tipo(Tipos.INT),valorleft,valorright);    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXP ::= DECIMAL 
            {
              Expresion RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Double valor = (Double)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Literal((Object)valor, new Tipo(Tipos.DOUBLE),valorleft,valorright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXP ::= CAD 
            {
              Expresion RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Literal((Object)valor, new Tipo(Tipos.STRING),valorleft,valorright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXP ::= ttrue 
            {
              Expresion RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Literal((Object)true, new Tipo(Tipos.BOOL),valorleft,valorright);    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXP ::= tfalse 
            {
              Expresion RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Literal((Object)false, new Tipo(Tipos.BOOL),valorleft,valorright);   
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXP ::= Tnull 
            {
              Expresion RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Literal((Object)valor, new Tipo(Tipos.STRING),valorleft,valorright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXP ::= tdefault 
            {
              Expresion RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Literal((Object)valor, new Tipo(Tipos.DEFAULT),valorleft,valorright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
