
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.*;
import java.util.LinkedList;
import ast.instrucciones.funciones.*;
import ast.instrucciones.graficas.*;
import ast.instrucciones.*;
import ast.expresiones.*;
import ast.expresiones.operaciones.Operacion.Operador;
import ast.expresiones.operaciones.*;
import entorno.Tipo;
import entorno.Tipo.Tipos;
import entorno.Var;
import entorno.nodoExp;
import entorno.Simbolo.*;
import entorno.Simbolo;
import entorno.fantasmita;
import ast.Expresion;
import ast.Instruccion;
import ast.AST;
import ast.NodoAST;
import olc2.p1_201504242.Ventana;
import olc2.p1_201504242.JError;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\133\000\002\002\004\000\002\003\003\000\002\002" +
    "\003\000\002\004\004\000\002\004\003\000\002\006\005" +
    "\000\002\006\004\000\002\016\011\000\002\016\010\000" +
    "\002\025\005\000\002\025\003\000\002\026\003\000\002" +
    "\026\005\000\002\020\005\000\002\020\010\000\002\020" +
    "\006\000\002\020\006\000\002\020\011\000\002\020\007" +
    "\000\002\022\004\000\002\022\003\000\002\023\005\000" +
    "\002\023\007\000\002\023\007\000\002\023\006\000\002" +
    "\023\006\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\006\000\002\005\004\000\002" +
    "\005\004\000\002\005\004\000\002\005\004\000\002\005" +
    "\004\000\002\005\007\000\002\005\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\021\005\000\002\021\006\000\002\007\007\000\002" +
    "\007\011\000\002\007\011\000\002\010\007\000\002\012" +
    "\011\000\002\011\010\000\002\013\006\000\002\013\003" +
    "\000\002\014\005\000\002\014\003\000\002\017\005\000" +
    "\002\017\003\000\002\015\004\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\005\000\002\015" +
    "\005\000\002\015\005\000\002\015\005\000\002\015\005" +
    "\000\002\015\005\000\002\015\005\000\002\015\005\000" +
    "\002\015\005\000\002\015\005\000\002\015\005\000\002" +
    "\015\004\000\002\015\007\000\002\015\005\000\002\015" +
    "\005\000\002\015\006\000\002\015\003\000\002\015\004" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\250\000\034\030\024\031\031\032\013\033\026\046" +
    "\004\050\012\053\033\054\007\055\015\057\020\061\034" +
    "\062\035\066\022\001\002\000\004\005\244\001\002\000" +
    "\036\002\uffff\030\024\031\031\032\013\033\026\046\004" +
    "\050\012\053\033\054\007\055\015\057\020\061\034\062" +
    "\035\066\022\001\002\000\040\002\uffe3\012\uffe3\030\uffe3" +
    "\031\uffe3\032\uffe3\033\uffe3\046\uffe3\050\uffe3\053\uffe3\054" +
    "\uffe3\055\uffe3\057\uffe3\061\uffe3\062\uffe3\066\uffe3\001\002" +
    "\000\004\011\157\001\002\000\004\005\233\001\002\000" +
    "\004\002\232\001\002\000\042\002\uffe1\004\231\012\uffe1" +
    "\030\uffe1\031\uffe1\032\uffe1\033\uffe1\046\uffe1\050\uffe1\053" +
    "\uffe1\054\uffe1\055\uffe1\057\uffe1\061\uffe1\062\uffe1\066\uffe1" +
    "\001\002\000\004\005\uffd3\001\002\000\042\002\uffdf\004" +
    "\230\012\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\046\uffdf" +
    "\050\uffdf\053\uffdf\054\uffdf\055\uffdf\057\uffdf\061\uffdf\062" +
    "\uffdf\066\uffdf\001\002\000\004\005\222\001\002\000\040" +
    "\002\ufffd\012\ufffd\030\ufffd\031\ufffd\032\ufffd\033\ufffd\046" +
    "\ufffd\050\ufffd\053\ufffd\054\ufffd\055\ufffd\057\ufffd\061\ufffd" +
    "\062\ufffd\066\ufffd\001\002\000\004\002\000\001\002\000" +
    "\042\002\uffe0\004\221\012\uffe0\030\uffe0\031\uffe0\032\uffe0" +
    "\033\uffe0\046\uffe0\050\uffe0\053\uffe0\054\uffe0\055\uffe0\057" +
    "\uffe0\061\uffe0\062\uffe0\066\uffe0\001\002\000\040\002\uffe5" +
    "\012\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\046\uffe5\050" +
    "\uffe5\053\uffe5\054\uffe5\055\uffe5\057\uffe5\061\uffe5\062\uffe5" +
    "\066\uffe5\001\002\000\010\005\170\007\114\037\167\001" +
    "\002\000\040\002\uffe6\012\uffe6\030\uffe6\031\uffe6\032\uffe6" +
    "\033\uffe6\046\uffe6\050\uffe6\053\uffe6\054\uffe6\055\uffe6\057" +
    "\uffe6\061\uffe6\062\uffe6\066\uffe6\001\002\000\004\005\uffd5" +
    "\001\002\000\042\002\uffe2\004\165\012\uffe2\030\uffe2\031" +
    "\uffe2\032\uffe2\033\uffe2\046\uffe2\050\uffe2\053\uffe2\054\uffe2" +
    "\055\uffe2\057\uffe2\061\uffe2\062\uffe2\066\uffe2\001\002\000" +
    "\004\005\uffd4\001\002\000\040\002\uffe4\012\uffe4\030\uffe4" +
    "\031\uffe4\032\uffe4\033\uffe4\046\uffe4\050\uffe4\053\uffe4\054" +
    "\uffe4\055\uffe4\057\uffe4\061\uffe4\062\uffe4\066\uffe4\001\002" +
    "\000\042\002\uffde\004\164\012\uffde\030\uffde\031\uffde\032" +
    "\uffde\033\uffde\046\uffde\050\uffde\053\uffde\054\uffde\055\uffde" +
    "\057\uffde\061\uffde\062\uffde\066\uffde\001\002\000\004\005" +
    "\uffd2\001\002\000\040\002\uffe7\012\uffe7\030\uffe7\031\uffe7" +
    "\032\uffe7\033\uffe7\046\uffe7\050\uffe7\053\uffe7\054\uffe7\055" +
    "\uffe7\057\uffe7\061\uffe7\062\uffe7\066\uffe7\001\002\000\004" +
    "\005\153\001\002\000\044\002\uffc8\004\uffc8\005\036\012" +
    "\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\046\uffc8\050\uffc8" +
    "\053\uffc8\054\uffc8\055\uffc8\057\uffc8\061\uffc8\062\uffc8\066" +
    "\uffc8\001\002\000\040\002\uffd6\012\uffd6\030\uffd6\031\uffd6" +
    "\032\uffd6\033\uffd6\046\uffd6\050\uffd6\053\uffd6\054\uffd6\055" +
    "\uffd6\057\uffd6\061\uffd6\062\uffd6\066\uffd6\001\002\000\030" +
    "\005\046\015\041\036\043\042\040\043\044\044\045\045" +
    "\051\063\042\064\037\066\047\067\052\001\002\000\112" +
    "\002\uffac\004\uffac\006\uffac\010\uffac\012\uffac\013\uffac\014" +
    "\uffac\015\uffac\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac" +
    "\023\uffac\024\uffac\025\uffac\026\uffac\027\uffac\030\uffac\031" +
    "\uffac\032\uffac\033\uffac\034\uffac\035\uffac\037\uffac\040\uffac" +
    "\041\uffac\046\uffac\050\uffac\053\uffac\054\uffac\055\uffac\057" +
    "\uffac\061\uffac\062\uffac\066\uffac\001\002\000\112\002\uffa8" +
    "\004\uffa8\006\uffa8\010\uffa8\012\uffa8\013\uffa8\014\uffa8\015" +
    "\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8\023\uffa8" +
    "\024\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8\032" +
    "\uffa8\033\uffa8\034\uffa8\035\uffa8\037\uffa8\040\uffa8\041\uffa8" +
    "\046\uffa8\050\uffa8\053\uffa8\054\uffa8\055\uffa8\057\uffa8\061" +
    "\uffa8\062\uffa8\066\uffa8\001\002\000\030\005\046\015\041" +
    "\036\043\042\040\043\044\044\045\045\051\063\042\064" +
    "\037\066\047\067\052\001\002\000\112\002\uffad\004\uffad" +
    "\006\uffad\010\uffad\012\uffad\013\uffad\014\uffad\015\uffad\016" +
    "\uffad\017\uffad\020\uffad\021\uffad\022\uffad\023\uffad\024\uffad" +
    "\025\uffad\026\uffad\027\uffad\030\uffad\031\uffad\032\uffad\033" +
    "\uffad\034\uffad\035\uffad\037\uffad\040\uffad\041\uffad\046\uffad" +
    "\050\uffad\053\uffad\054\uffad\055\uffad\057\uffad\061\uffad\062" +
    "\uffad\066\uffad\001\002\000\030\005\046\015\041\036\043" +
    "\042\040\043\044\044\045\045\051\063\042\064\037\066" +
    "\047\067\052\001\002\000\112\002\uffaa\004\uffaa\006\uffaa" +
    "\010\uffaa\012\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa\017" +
    "\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa" +
    "\026\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa\034" +
    "\uffaa\035\uffaa\037\uffaa\040\uffaa\041\uffaa\046\uffaa\050\uffaa" +
    "\053\uffaa\054\uffaa\055\uffaa\057\uffaa\061\uffaa\062\uffaa\066" +
    "\uffaa\001\002\000\112\002\uffa9\004\uffa9\006\uffa9\010\uffa9" +
    "\012\uffa9\013\uffa9\014\uffa9\015\uffa9\016\uffa9\017\uffa9\020" +
    "\uffa9\021\uffa9\022\uffa9\023\uffa9\024\uffa9\025\uffa9\026\uffa9" +
    "\027\uffa9\030\uffa9\031\uffa9\032\uffa9\033\uffa9\034\uffa9\035" +
    "\uffa9\037\uffa9\040\uffa9\041\uffa9\046\uffa9\050\uffa9\053\uffa9" +
    "\054\uffa9\055\uffa9\057\uffa9\061\uffa9\062\uffa9\066\uffa9\001" +
    "\002\000\030\005\046\015\041\036\043\042\040\043\044" +
    "\044\045\045\051\063\042\064\037\066\047\067\052\001" +
    "\002\000\116\002\uffaf\004\uffaf\005\116\006\uffaf\007\114" +
    "\010\uffaf\012\uffaf\013\uffaf\014\uffaf\015\uffaf\016\uffaf\017" +
    "\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf" +
    "\026\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf\034" +
    "\uffaf\035\uffaf\037\uffaf\040\uffaf\041\uffaf\046\uffaf\050\uffaf" +
    "\053\uffaf\054\uffaf\055\uffaf\057\uffaf\061\uffaf\062\uffaf\066" +
    "\uffaf\001\002\000\042\006\071\014\063\015\056\016\060" +
    "\017\061\020\055\021\067\022\054\023\072\024\066\025" +
    "\057\026\064\027\053\034\070\035\065\040\062\001\002" +
    "\000\112\002\uffa7\004\uffa7\006\uffa7\010\uffa7\012\uffa7\013" +
    "\uffa7\014\uffa7\015\uffa7\016\uffa7\017\uffa7\020\uffa7\021\uffa7" +
    "\022\uffa7\023\uffa7\024\uffa7\025\uffa7\026\uffa7\027\uffa7\030" +
    "\uffa7\031\uffa7\032\uffa7\033\uffa7\034\uffa7\035\uffa7\037\uffa7" +
    "\040\uffa7\041\uffa7\046\uffa7\050\uffa7\053\uffa7\054\uffa7\055" +
    "\uffa7\057\uffa7\061\uffa7\062\uffa7\066\uffa7\001\002\000\112" +
    "\002\uffab\004\uffab\006\uffab\010\uffab\012\uffab\013\uffab\014" +
    "\uffab\015\uffab\016\uffab\017\uffab\020\uffab\021\uffab\022\uffab" +
    "\023\uffab\024\uffab\025\uffab\026\uffab\027\uffab\030\uffab\031" +
    "\uffab\032\uffab\033\uffab\034\uffab\035\uffab\037\uffab\040\uffab" +
    "\041\uffab\046\uffab\050\uffab\053\uffab\054\uffab\055\uffab\057" +
    "\uffab\061\uffab\062\uffab\066\uffab\001\002\000\030\005\046" +
    "\015\041\036\043\042\040\043\044\044\045\045\051\063" +
    "\042\064\037\066\047\067\052\001\002\000\030\005\046" +
    "\015\041\036\043\042\040\043\044\044\045\045\051\063" +
    "\042\064\037\066\047\067\052\001\002\000\030\005\046" +
    "\015\041\036\043\042\040\043\044\044\045\045\051\063" +
    "\042\064\037\066\047\067\052\001\002\000\030\005\046" +
    "\015\041\036\043\042\040\043\044\044\045\045\051\063" +
    "\042\064\037\066\047\067\052\001\002\000\030\005\046" +
    "\015\041\036\043\042\040\043\044\044\045\045\051\063" +
    "\042\064\037\066\047\067\052\001\002\000\030\005\046" +
    "\015\041\036\043\042\040\043\044\044\045\045\051\063" +
    "\042\064\037\066\047\067\052\001\002\000\030\005\046" +
    "\015\041\036\043\042\040\043\044\044\045\045\051\063" +
    "\042\064\037\066\047\067\052\001\002\000\030\005\046" +
    "\015\041\036\043\042\040\043\044\044\045\045\051\063" +
    "\042\064\037\066\047\067\052\001\002\000\030\005\046" +
    "\015\041\036\043\042\040\043\044\044\045\045\051\063" +
    "\042\064\037\066\047\067\052\001\002\000\030\005\046" +
    "\015\041\036\043\042\040\043\044\044\045\045\051\063" +
    "\042\064\037\066\047\067\052\001\002\000\030\005\046" +
    "\015\041\036\043\042\040\043\044\044\045\045\051\063" +
    "\042\064\037\066\047\067\052\001\002\000\030\005\046" +
    "\015\041\036\043\042\040\043\044\044\045\045\051\063" +
    "\042\064\037\066\047\067\052\001\002\000\030\005\046" +
    "\015\041\036\043\042\040\043\044\044\045\045\051\063" +
    "\042\064\037\066\047\067\052\001\002\000\030\005\046" +
    "\015\041\036\043\042\040\043\044\044\045\045\051\063" +
    "\042\064\037\066\047\067\052\001\002\000\042\002\uffc9" +
    "\004\uffc9\012\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\046" +
    "\uffc9\050\uffc9\053\uffc9\054\uffc9\055\uffc9\057\uffc9\061\uffc9" +
    "\062\uffc9\066\uffc9\001\002\000\030\005\046\015\041\036" +
    "\043\042\040\043\044\044\045\045\051\063\042\064\037" +
    "\066\047\067\052\001\002\000\112\002\uffb6\004\uffb6\006" +
    "\uffb6\010\uffb6\012\uffb6\013\uffb6\014\063\015\056\016\060" +
    "\017\061\020\055\021\067\022\uffb6\023\uffb6\024\066\025" +
    "\057\026\064\027\053\030\uffb6\031\uffb6\032\uffb6\033\uffb6" +
    "\034\uffb6\035\uffb6\037\uffb6\040\uffb6\041\uffb6\046\uffb6\050" +
    "\uffb6\053\uffb6\054\uffb6\055\uffb6\057\uffb6\061\uffb6\062\uffb6" +
    "\066\uffb6\001\002\000\112\002\uffc2\004\uffc2\006\uffc2\010" +
    "\uffc2\012\uffc2\013\uffc2\014\063\015\056\016\060\017\061" +
    "\020\055\021\067\022\054\023\072\024\066\025\057\026" +
    "\064\027\053\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2" +
    "\035\065\037\uffc2\040\uffc2\041\uffc2\046\uffc2\050\uffc2\053" +
    "\uffc2\054\uffc2\055\uffc2\057\uffc2\061\uffc2\062\uffc2\066\uffc2" +
    "\001\002\000\112\002\uffc0\004\uffc0\006\uffc0\010\uffc0\012" +
    "\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0\020\055" +
    "\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\027" +
    "\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0" +
    "\037\uffc0\040\uffc0\041\uffc0\046\uffc0\050\uffc0\053\uffc0\054" +
    "\uffc0\055\uffc0\057\uffc0\061\uffc0\062\uffc0\066\uffc0\001\002" +
    "\000\112\002\uffbb\004\uffbb\006\uffbb\010\uffbb\012\uffbb\013" +
    "\uffbb\014\063\015\056\016\060\017\061\020\055\021\067" +
    "\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb\030" +
    "\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb\037\uffbb" +
    "\040\uffbb\041\uffbb\046\uffbb\050\uffbb\053\uffbb\054\uffbb\055" +
    "\uffbb\057\uffbb\061\uffbb\062\uffbb\066\uffbb\001\002\000\112" +
    "\002\uffb5\004\uffb5\006\uffb5\010\uffb5\012\uffb5\013\uffb5\014" +
    "\063\015\056\016\060\017\061\020\055\021\067\022\054" +
    "\023\072\024\066\025\057\026\064\027\053\030\uffb5\031" +
    "\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5\037\uffb5\040\uffb5" +
    "\041\uffb5\046\uffb5\050\uffb5\053\uffb5\054\uffb5\055\uffb5\057" +
    "\uffb5\061\uffb5\062\uffb5\066\uffb5\001\002\000\112\002\uffba" +
    "\004\uffba\006\uffba\010\uffba\012\uffba\013\uffba\014\063\015" +
    "\056\016\060\017\061\020\055\021\067\022\uffba\023\uffba" +
    "\024\uffba\025\uffba\026\uffba\027\uffba\030\uffba\031\uffba\032" +
    "\uffba\033\uffba\034\uffba\035\uffba\037\uffba\040\uffba\041\uffba" +
    "\046\uffba\050\uffba\053\uffba\054\uffba\055\uffba\057\uffba\061" +
    "\uffba\062\uffba\066\uffba\001\002\000\112\002\uffbe\004\uffbe" +
    "\006\uffbe\010\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe\016" +
    "\060\017\061\020\055\021\067\022\uffbe\023\uffbe\024\uffbe" +
    "\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033" +
    "\uffbe\034\uffbe\035\uffbe\037\uffbe\040\uffbe\041\uffbe\046\uffbe" +
    "\050\uffbe\053\uffbe\054\uffbe\055\uffbe\057\uffbe\061\uffbe\062" +
    "\uffbe\066\uffbe\001\002\000\042\014\063\015\056\016\060" +
    "\017\061\020\055\021\067\022\054\023\072\024\066\025" +
    "\057\026\064\027\053\034\070\035\065\040\062\041\103" +
    "\001\002\000\030\005\046\015\041\036\043\042\040\043" +
    "\044\044\045\045\051\063\042\064\037\066\047\067\052" +
    "\001\002\000\112\002\uffb3\004\uffb3\006\uffb3\010\uffb3\012" +
    "\uffb3\013\uffb3\014\063\015\056\016\060\017\061\020\055" +
    "\021\067\022\054\023\072\024\066\025\057\026\064\027" +
    "\053\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034\070\035\065" +
    "\037\uffb3\040\062\041\uffb3\046\uffb3\050\uffb3\053\uffb3\054" +
    "\uffb3\055\uffb3\057\uffb3\061\uffb3\062\uffb3\066\uffb3\001\002" +
    "\000\112\002\uffbf\004\uffbf\006\uffbf\010\uffbf\012\uffbf\013" +
    "\uffbf\014\uffbf\015\uffbf\016\uffbf\017\uffbf\020\055\021\uffbf" +
    "\022\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030" +
    "\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf\037\uffbf" +
    "\040\uffbf\041\uffbf\046\uffbf\050\uffbf\053\uffbf\054\uffbf\055" +
    "\uffbf\057\uffbf\061\uffbf\062\uffbf\066\uffbf\001\002\000\112" +
    "\002\uffc1\004\uffc1\006\uffc1\010\uffc1\012\uffc1\013\uffc1\014" +
    "\uffc1\015\uffc1\016\uffc1\017\uffc1\020\055\021\uffc1\022\uffc1" +
    "\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031" +
    "\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\037\uffc1\040\uffc1" +
    "\041\uffc1\046\uffc1\050\uffc1\053\uffc1\054\uffc1\055\uffc1\057" +
    "\uffc1\061\uffc1\062\uffc1\066\uffc1\001\002\000\112\002\uffb9" +
    "\004\uffb9\006\uffb9\010\uffb9\012\uffb9\013\uffb9\014\063\015" +
    "\056\016\060\017\061\020\055\021\067\022\uffb9\023\uffb9" +
    "\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032" +
    "\uffb9\033\uffb9\034\uffb9\035\uffb9\037\uffb9\040\uffb9\041\uffb9" +
    "\046\uffb9\050\uffb9\053\uffb9\054\uffb9\055\uffb9\057\uffb9\061" +
    "\uffb9\062\uffb9\066\uffb9\001\002\000\112\002\uffbd\004\uffbd" +
    "\006\uffbd\010\uffbd\012\uffbd\013\uffbd\014\uffbd\015\uffbd\016" +
    "\060\017\061\020\055\021\067\022\uffbd\023\uffbd\024\uffbd" +
    "\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\033" +
    "\uffbd\034\uffbd\035\uffbd\037\uffbd\040\uffbd\041\uffbd\046\uffbd" +
    "\050\uffbd\053\uffbd\054\uffbd\055\uffbd\057\uffbd\061\uffbd\062" +
    "\uffbd\066\uffbd\001\002\000\112\002\uffbc\004\uffbc\006\uffbc" +
    "\010\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc\016\uffbc\017" +
    "\uffbc\020\055\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc" +
    "\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034" +
    "\uffbc\035\uffbc\037\uffbc\040\uffbc\041\uffbc\046\uffbc\050\uffbc" +
    "\053\uffbc\054\uffbc\055\uffbc\057\uffbc\061\uffbc\062\uffbc\066" +
    "\uffbc\001\002\000\112\002\uffb7\004\uffb7\006\uffb7\010\uffb7" +
    "\012\uffb7\013\uffb7\014\063\015\056\016\060\017\061\020" +
    "\055\021\067\022\uffb7\023\uffb7\024\066\025\057\026\064" +
    "\027\053\030\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7\035" +
    "\uffb7\037\uffb7\040\uffb7\041\uffb7\046\uffb7\050\uffb7\053\uffb7" +
    "\054\uffb7\055\uffb7\057\uffb7\061\uffb7\062\uffb7\066\uffb7\001" +
    "\002\000\112\002\uffb8\004\uffb8\006\uffb8\010\uffb8\012\uffb8" +
    "\013\uffb8\014\063\015\056\016\060\017\061\020\055\021" +
    "\067\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8" +
    "\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\037" +
    "\uffb8\040\uffb8\041\uffb8\046\uffb8\050\uffb8\053\uffb8\054\uffb8" +
    "\055\uffb8\057\uffb8\061\uffb8\062\uffb8\066\uffb8\001\002\000" +
    "\034\005\046\007\133\013\132\015\041\036\043\042\040" +
    "\043\044\044\045\045\051\063\042\064\037\066\047\067" +
    "\052\001\002\000\114\002\uffed\004\uffed\006\uffed\007\uffed" +
    "\010\uffed\012\uffed\013\uffed\014\uffed\015\uffed\016\uffed\017" +
    "\uffed\020\uffed\021\uffed\022\uffed\023\uffed\024\uffed\025\uffed" +
    "\026\uffed\027\uffed\030\uffed\031\uffed\032\uffed\033\uffed\034" +
    "\uffed\035\uffed\037\uffed\040\uffed\041\uffed\046\uffed\050\uffed" +
    "\053\uffed\054\uffed\055\uffed\057\uffed\061\uffed\062\uffed\066" +
    "\uffed\001\002\000\032\005\046\006\122\015\041\036\043" +
    "\042\040\043\044\044\045\045\051\063\042\064\037\066" +
    "\047\067\052\001\002\000\114\002\uffae\004\uffae\006\uffae" +
    "\007\114\010\uffae\012\uffae\013\uffae\014\uffae\015\uffae\016" +
    "\uffae\017\uffae\020\uffae\021\uffae\022\uffae\023\uffae\024\uffae" +
    "\025\uffae\026\uffae\027\uffae\030\uffae\031\uffae\032\uffae\033" +
    "\uffae\034\uffae\035\uffae\037\uffae\040\uffae\041\uffae\046\uffae" +
    "\050\uffae\053\uffae\054\uffae\055\uffae\057\uffae\061\uffae\062" +
    "\uffae\066\uffae\001\002\000\114\002\uffee\004\uffee\006\uffee" +
    "\007\uffee\010\uffee\012\uffee\013\uffee\014\uffee\015\uffee\016" +
    "\uffee\017\uffee\020\uffee\021\uffee\022\uffee\023\uffee\024\uffee" +
    "\025\uffee\026\uffee\027\uffee\030\uffee\031\uffee\032\uffee\033" +
    "\uffee\034\uffee\035\uffee\037\uffee\040\uffee\041\uffee\046\uffee" +
    "\050\uffee\053\uffee\054\uffee\055\uffee\057\uffee\061\uffee\062" +
    "\uffee\066\uffee\001\002\000\006\006\uffc6\013\uffc6\001\002" +
    "\000\112\002\uffb1\004\uffb1\006\uffb1\010\uffb1\012\uffb1\013" +
    "\uffb1\014\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1" +
    "\022\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030" +
    "\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1\037\uffb1" +
    "\040\uffb1\041\uffb1\046\uffb1\050\uffb1\053\uffb1\054\uffb1\055" +
    "\uffb1\057\uffb1\061\uffb1\062\uffb1\066\uffb1\001\002\000\046" +
    "\006\uffc4\013\uffc4\014\063\015\056\016\060\017\061\020" +
    "\055\021\067\022\054\023\072\024\066\025\057\026\064" +
    "\027\053\034\070\035\065\037\130\040\062\001\002\000" +
    "\006\006\126\013\125\001\002\000\030\005\046\015\041" +
    "\036\043\042\040\043\044\044\045\045\051\063\042\064" +
    "\037\066\047\067\052\001\002\000\112\002\uffb0\004\uffb0" +
    "\006\uffb0\010\uffb0\012\uffb0\013\uffb0\014\uffb0\015\uffb0\016" +
    "\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0\024\uffb0" +
    "\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033" +
    "\uffb0\034\uffb0\035\uffb0\037\uffb0\040\uffb0\041\uffb0\046\uffb0" +
    "\050\uffb0\053\uffb0\054\uffb0\055\uffb0\057\uffb0\061\uffb0\062" +
    "\uffb0\066\uffb0\001\002\000\006\006\uffc7\013\uffc7\001\002" +
    "\000\030\005\046\015\041\036\043\042\040\043\044\044" +
    "\045\045\051\063\042\064\037\066\047\067\052\001\002" +
    "\000\044\006\uffc5\013\uffc5\014\063\015\056\016\060\017" +
    "\061\020\055\021\067\022\054\023\072\024\066\025\057" +
    "\026\064\027\053\034\070\035\065\040\062\001\002\000" +
    "\030\005\046\015\041\036\043\042\040\043\044\044\045" +
    "\045\051\063\042\064\037\066\047\067\052\001\002\000" +
    "\030\005\046\015\041\036\043\042\040\043\044\044\045" +
    "\045\051\063\042\064\037\066\047\067\052\001\002\000" +
    "\044\010\136\013\135\014\063\015\056\016\060\017\061" +
    "\020\055\021\067\022\054\023\072\024\066\025\057\026" +
    "\064\027\053\034\070\035\065\040\062\001\002\000\032" +
    "\005\046\010\137\015\041\036\043\042\040\043\044\044" +
    "\045\045\051\063\042\064\037\066\047\067\052\001\002" +
    "\000\114\002\uffec\004\uffec\006\uffec\007\uffec\010\uffec\012" +
    "\uffec\013\uffec\014\uffec\015\uffec\016\uffec\017\uffec\020\uffec" +
    "\021\uffec\022\uffec\023\uffec\024\uffec\025\uffec\026\uffec\027" +
    "\uffec\030\uffec\031\uffec\032\uffec\033\uffec\034\uffec\035\uffec" +
    "\037\uffec\040\uffec\041\uffec\046\uffec\050\uffec\053\uffec\054" +
    "\uffec\055\uffec\057\uffec\061\uffec\062\uffec\066\uffec\001\002" +
    "\000\114\002\uffe9\004\uffe9\006\uffe9\007\uffe9\010\uffe9\012" +
    "\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9" +
    "\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027" +
    "\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9" +
    "\037\uffe9\040\uffe9\041\uffe9\046\uffe9\050\uffe9\053\uffe9\054" +
    "\uffe9\055\uffe9\057\uffe9\061\uffe9\062\uffe9\066\uffe9\001\002" +
    "\000\042\010\141\014\063\015\056\016\060\017\061\020" +
    "\055\021\067\022\054\023\072\024\066\025\057\026\064" +
    "\027\053\034\070\035\065\040\062\001\002\000\114\002" +
    "\uffea\004\uffea\006\uffea\007\uffea\010\uffea\012\uffea\013\uffea" +
    "\014\uffea\015\uffea\016\uffea\017\uffea\020\uffea\021\uffea\022" +
    "\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea\030\uffea" +
    "\031\uffea\032\uffea\033\uffea\034\uffea\035\uffea\037\uffea\040" +
    "\uffea\041\uffea\046\uffea\050\uffea\053\uffea\054\uffea\055\uffea" +
    "\057\uffea\061\uffea\062\uffea\066\uffea\001\002\000\042\010" +
    "\143\014\063\015\056\016\060\017\061\020\055\021\067" +
    "\022\054\023\072\024\066\025\057\026\064\027\053\034" +
    "\070\035\065\040\062\001\002\000\004\010\144\001\002" +
    "\000\114\002\uffeb\004\uffeb\006\uffeb\007\uffeb\010\uffeb\012" +
    "\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb" +
    "\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027" +
    "\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb" +
    "\037\uffeb\040\uffeb\041\uffeb\046\uffeb\050\uffeb\053\uffeb\054" +
    "\uffeb\055\uffeb\057\uffeb\061\uffeb\062\uffeb\066\uffeb\001\002" +
    "\000\042\010\146\014\063\015\056\016\060\017\061\020" +
    "\055\021\067\022\054\023\072\024\066\025\057\026\064" +
    "\027\053\034\070\035\065\040\062\001\002\000\114\002" +
    "\uffe8\004\uffe8\006\uffe8\007\uffe8\010\uffe8\012\uffe8\013\uffe8" +
    "\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022" +
    "\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8" +
    "\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\037\uffe8\040" +
    "\uffe8\041\uffe8\046\uffe8\050\uffe8\053\uffe8\054\uffe8\055\uffe8" +
    "\057\uffe8\061\uffe8\062\uffe8\066\uffe8\001\002\000\042\006" +
    "\150\014\063\015\056\016\060\017\061\020\055\021\067" +
    "\022\054\023\072\024\066\025\057\026\064\027\053\034" +
    "\070\035\065\040\062\001\002\000\112\002\uffb2\004\uffb2" +
    "\006\uffb2\010\uffb2\012\uffb2\013\uffb2\014\uffb2\015\uffb2\016" +
    "\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2" +
    "\025\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\033" +
    "\uffb2\034\uffb2\035\uffb2\037\uffb2\040\uffb2\041\uffb2\046\uffb2" +
    "\050\uffb2\053\uffb2\054\uffb2\055\uffb2\057\uffb2\061\uffb2\062" +
    "\uffb2\066\uffb2\001\002\000\112\002\uffb4\004\uffb4\006\uffb4" +
    "\010\uffb4\012\uffb4\013\uffb4\014\uffb4\015\uffb4\016\uffb4\017" +
    "\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4" +
    "\026\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4\034" +
    "\uffb4\035\uffb4\037\uffb4\040\uffb4\041\uffb4\046\uffb4\050\uffb4" +
    "\053\uffb4\054\uffb4\055\uffb4\057\uffb4\061\uffb4\062\uffb4\066" +
    "\uffb4\001\002\000\112\002\uffc3\004\uffc3\006\uffc3\010\uffc3" +
    "\012\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\020" +
    "\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3" +
    "\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035" +
    "\uffc3\037\uffc3\040\uffc3\041\uffc3\046\uffc3\050\uffc3\053\uffc3" +
    "\054\uffc3\055\uffc3\057\uffc3\061\uffc3\062\uffc3\066\uffc3\001" +
    "\002\000\030\005\046\015\041\036\043\042\040\043\044" +
    "\044\045\045\051\063\042\064\037\066\047\067\052\001" +
    "\002\000\042\006\155\014\063\015\056\016\060\017\061" +
    "\020\055\021\067\022\054\023\072\024\066\025\057\026" +
    "\064\027\053\034\070\035\065\040\062\001\002\000\004" +
    "\011\157\001\002\000\040\002\uffcc\012\uffcc\030\uffcc\031" +
    "\uffcc\032\uffcc\033\uffcc\046\uffcc\050\uffcc\053\uffcc\054\uffcc" +
    "\055\uffcc\057\uffcc\061\uffcc\062\uffcc\066\uffcc\001\002\000" +
    "\036\012\161\030\024\031\031\032\013\033\026\046\004" +
    "\050\012\053\033\054\007\055\015\057\020\061\034\062" +
    "\035\066\022\001\002\000\036\012\162\030\024\031\031" +
    "\032\013\033\026\046\004\050\012\053\033\054\007\055" +
    "\015\057\020\061\034\062\035\066\022\001\002\000\042" +
    "\002\ufffb\012\ufffb\030\ufffb\031\ufffb\032\ufffb\033\ufffb\046" +
    "\ufffb\047\ufffb\050\ufffb\053\ufffb\054\ufffb\055\ufffb\057\ufffb" +
    "\061\ufffb\062\ufffb\066\ufffb\001\002\000\042\002\ufffc\012" +
    "\ufffc\030\ufffc\031\ufffc\032\ufffc\033\ufffc\046\ufffc\047\ufffc" +
    "\050\ufffc\053\ufffc\054\ufffc\055\ufffc\057\ufffc\061\ufffc\062" +
    "\ufffc\066\ufffc\001\002\000\040\002\ufffe\012\ufffe\030\ufffe" +
    "\031\ufffe\032\ufffe\033\ufffe\046\ufffe\050\ufffe\053\ufffe\054" +
    "\ufffe\055\ufffe\057\ufffe\061\ufffe\062\ufffe\066\ufffe\001\002" +
    "\000\040\002\uffd8\012\uffd8\030\uffd8\031\uffd8\032\uffd8\033" +
    "\uffd8\046\uffd8\050\uffd8\053\uffd8\054\uffd8\055\uffd8\057\uffd8" +
    "\061\uffd8\062\uffd8\066\uffd8\001\002\000\040\002\uffdc\012" +
    "\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\046\uffdc\050\uffdc" +
    "\053\uffdc\054\uffdc\055\uffdc\057\uffdc\061\uffdc\062\uffdc\066" +
    "\uffdc\001\002\000\006\007\114\037\216\001\002\000\032" +
    "\005\046\015\041\036\043\042\040\043\044\044\045\045" +
    "\051\060\177\063\042\064\037\066\047\067\052\001\002" +
    "\000\032\005\046\006\171\015\041\036\043\042\040\043" +
    "\044\044\045\045\051\063\042\064\037\066\047\067\052" +
    "\001\002\000\042\002\uffd1\004\uffd1\012\uffd1\030\uffd1\031" +
    "\uffd1\032\uffd1\033\uffd1\046\uffd1\050\uffd1\053\uffd1\054\uffd1" +
    "\055\uffd1\057\uffd1\061\uffd1\062\uffd1\066\uffd1\001\002\000" +
    "\006\006\173\013\125\001\002\000\044\002\uffd0\004\uffd0" +
    "\012\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\037\174\046" +
    "\uffd0\050\uffd0\053\uffd0\054\uffd0\055\uffd0\057\uffd0\061\uffd0" +
    "\062\uffd0\066\uffd0\001\002\000\030\005\046\015\041\036" +
    "\043\042\040\043\044\044\045\045\051\063\042\064\037" +
    "\066\047\067\052\001\002\000\100\002\ufff3\004\176\012" +
    "\ufff3\014\063\015\056\016\060\017\061\020\055\021\067" +
    "\022\054\023\072\024\066\025\057\026\064\027\053\030" +
    "\ufff3\031\ufff3\032\ufff3\033\ufff3\034\070\035\065\040\062" +
    "\046\ufff3\050\ufff3\053\ufff3\054\ufff3\055\ufff3\057\ufff3\061" +
    "\ufff3\062\ufff3\066\ufff3\001\002\000\040\002\ufff0\012\ufff0" +
    "\030\ufff0\031\ufff0\032\ufff0\033\ufff0\046\ufff0\050\ufff0\053" +
    "\ufff0\054\ufff0\055\ufff0\057\ufff0\061\ufff0\062\ufff0\066\ufff0" +
    "\001\002\000\004\005\202\001\002\000\100\002\ufff4\004" +
    "\201\012\ufff4\014\063\015\056\016\060\017\061\020\055" +
    "\021\067\022\054\023\072\024\066\025\057\026\064\027" +
    "\053\030\ufff4\031\ufff4\032\ufff4\033\ufff4\034\070\035\065" +
    "\040\062\046\ufff4\050\ufff4\053\ufff4\054\ufff4\055\ufff4\057" +
    "\ufff4\061\ufff4\062\ufff4\066\ufff4\001\002\000\040\002\ufff1" +
    "\012\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1\046\ufff1\050" +
    "\ufff1\053\ufff1\054\ufff1\055\ufff1\057\ufff1\061\ufff1\062\ufff1" +
    "\066\ufff1\001\002\000\006\006\205\066\203\001\002\000" +
    "\010\006\ufff6\013\ufff6\037\214\001\002\000\006\006\211" +
    "\013\210\001\002\000\004\011\157\001\002\000\006\006" +
    "\ufff7\013\ufff7\001\002\000\040\002\ufff9\012\ufff9\030\ufff9" +
    "\031\ufff9\032\ufff9\033\ufff9\046\ufff9\050\ufff9\053\ufff9\054" +
    "\ufff9\055\ufff9\057\ufff9\061\ufff9\062\ufff9\066\ufff9\001\002" +
    "\000\004\066\203\001\002\000\004\011\157\001\002\000" +
    "\040\002\ufffa\012\ufffa\030\ufffa\031\ufffa\032\ufffa\033\ufffa" +
    "\046\ufffa\050\ufffa\053\ufffa\054\ufffa\055\ufffa\057\ufffa\061" +
    "\ufffa\062\ufffa\066\ufffa\001\002\000\006\006\ufff8\013\ufff8" +
    "\001\002\000\030\005\046\015\041\036\043\042\040\043" +
    "\044\044\045\045\051\063\042\064\037\066\047\067\052" +
    "\001\002\000\044\006\ufff5\013\ufff5\014\063\015\056\016" +
    "\060\017\061\020\055\021\067\022\054\023\072\024\066" +
    "\025\057\026\064\027\053\034\070\035\065\040\062\001" +
    "\002\000\030\005\046\015\041\036\043\042\040\043\044" +
    "\044\045\045\051\063\042\064\037\066\047\067\052\001" +
    "\002\000\100\002\ufff2\004\220\012\ufff2\014\063\015\056" +
    "\016\060\017\061\020\055\021\067\022\054\023\072\024" +
    "\066\025\057\026\064\027\053\030\ufff2\031\ufff2\032\ufff2" +
    "\033\ufff2\034\070\035\065\040\062\046\ufff2\050\ufff2\053" +
    "\ufff2\054\ufff2\055\ufff2\057\ufff2\061\ufff2\062\ufff2\066\ufff2" +
    "\001\002\000\040\002\uffef\012\uffef\030\uffef\031\uffef\032" +
    "\uffef\033\uffef\046\uffef\050\uffef\053\uffef\054\uffef\055\uffef" +
    "\057\uffef\061\uffef\062\uffef\066\uffef\001\002\000\040\002" +
    "\uffda\012\uffda\030\uffda\031\uffda\032\uffda\033\uffda\046\uffda" +
    "\050\uffda\053\uffda\054\uffda\055\uffda\057\uffda\061\uffda\062" +
    "\uffda\066\uffda\001\002\000\004\066\223\001\002\000\004" +
    "\056\224\001\002\000\030\005\046\015\041\036\043\042" +
    "\040\043\044\044\045\045\051\063\042\064\037\066\047" +
    "\067\052\001\002\000\042\006\226\014\063\015\056\016" +
    "\060\017\061\020\055\021\067\022\054\023\072\024\066" +
    "\025\057\026\064\027\053\034\070\035\065\040\062\001" +
    "\002\000\004\011\157\001\002\000\040\002\uffcb\012\uffcb" +
    "\030\uffcb\031\uffcb\032\uffcb\033\uffcb\046\uffcb\050\uffcb\053" +
    "\uffcb\054\uffcb\055\uffcb\057\uffcb\061\uffcb\062\uffcb\066\uffcb" +
    "\001\002\000\040\002\uffd9\012\uffd9\030\uffd9\031\uffd9\032" +
    "\uffd9\033\uffd9\046\uffd9\050\uffd9\053\uffd9\054\uffd9\055\uffd9" +
    "\057\uffd9\061\uffd9\062\uffd9\066\uffd9\001\002\000\040\002" +
    "\uffdb\012\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\046\uffdb" +
    "\050\uffdb\053\uffdb\054\uffdb\055\uffdb\057\uffdb\061\uffdb\062" +
    "\uffdb\066\uffdb\001\002\000\004\002\001\001\002\000\030" +
    "\005\046\015\041\036\043\042\040\043\044\044\045\045" +
    "\051\063\042\064\037\066\047\067\052\001\002\000\006" +
    "\006\235\013\125\001\002\000\042\002\uffdd\004\236\012" +
    "\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\046\uffdd\050\uffdd" +
    "\053\uffdd\054\uffdd\055\uffdd\057\uffdd\061\uffdd\062\uffdd\066" +
    "\uffdd\001\002\000\040\002\uffd7\012\uffd7\030\uffd7\031\uffd7" +
    "\032\uffd7\033\uffd7\046\uffd7\050\uffd7\053\uffd7\054\uffd7\055" +
    "\uffd7\057\uffd7\061\uffd7\062\uffd7\066\uffd7\001\002\000\004" +
    "\053\240\001\002\000\004\005\241\001\002\000\030\005" +
    "\046\015\041\036\043\042\040\043\044\044\045\045\051" +
    "\063\042\064\037\066\047\067\052\001\002\000\042\006" +
    "\243\014\063\015\056\016\060\017\061\020\055\021\067" +
    "\022\054\023\072\024\066\025\057\026\064\027\053\034" +
    "\070\035\065\040\062\001\002\000\042\002\uffca\004\uffca" +
    "\012\uffca\030\uffca\031\uffca\032\uffca\033\uffca\046\uffca\050" +
    "\uffca\053\uffca\054\uffca\055\uffca\057\uffca\061\uffca\062\uffca" +
    "\066\uffca\001\002\000\030\005\046\015\041\036\043\042" +
    "\040\043\044\044\045\045\051\063\042\064\037\066\047" +
    "\067\052\001\002\000\042\006\246\014\063\015\056\016" +
    "\060\017\061\020\055\021\067\022\054\023\072\024\066" +
    "\025\057\026\064\027\053\034\070\035\065\040\062\001" +
    "\002\000\004\011\157\001\002\000\042\002\uffcf\012\uffcf" +
    "\030\uffcf\031\uffcf\032\uffcf\033\uffcf\046\uffcf\047\250\050" +
    "\uffcf\053\uffcf\054\uffcf\055\uffcf\057\uffcf\061\uffcf\062\uffcf" +
    "\066\uffcf\001\002\000\006\011\157\046\004\001\002\000" +
    "\040\002\uffce\012\uffce\030\uffce\031\uffce\032\uffce\033\uffce" +
    "\046\uffce\050\uffce\053\uffce\054\uffce\055\uffce\057\uffce\061" +
    "\uffce\062\uffce\066\uffce\001\002\000\040\002\uffcd\012\uffcd" +
    "\030\uffcd\031\uffcd\032\uffcd\033\uffcd\046\uffcd\050\uffcd\053" +
    "\uffcd\054\uffcd\055\uffcd\057\uffcd\061\uffcd\062\uffcd\066\uffcd" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\250\000\034\002\016\003\010\004\004\005\015\007" +
    "\020\010\026\011\024\012\005\013\013\016\031\020\022" +
    "\021\027\024\007\001\001\000\002\001\001\000\026\005" +
    "\162\007\020\010\026\011\024\012\005\013\013\016\031" +
    "\020\022\021\027\024\007\001\001\000\002\001\001\000" +
    "\004\006\236\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\022\165\023\114\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\151\001\001" +
    "\000\002\001\001\000\004\015\150\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\146\001\001\000\006" +
    "\022\116\023\114\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\112\001\001\000\004" +
    "\015\111\001\001\000\004\015\110\001\001\000\004\015" +
    "\107\001\001\000\004\015\106\001\001\000\004\015\105" +
    "\001\001\000\004\015\104\001\001\000\004\015\101\001" +
    "\001\000\004\015\100\001\001\000\004\015\077\001\001" +
    "\000\004\015\076\001\001\000\004\015\075\001\001\000" +
    "\004\015\074\001\001\000\004\015\073\001\001\000\002" +
    "\001\001\000\004\015\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\103\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\133\001\001\000\002\001\001\000\010\014" +
    "\123\015\122\017\120\001\001\000\004\023\117\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\122\017\126" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\130\001\001\000\002\001\001\000\004\015\144\001\001" +
    "\000\004\015\141\001\001\000\002\001\001\000\004\015" +
    "\137\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\153\001\001\000\002\001\001" +
    "\000\004\006\155\001\001\000\002\001\001\000\030\004" +
    "\157\005\015\007\020\010\026\011\024\012\005\013\013" +
    "\016\031\020\022\021\027\024\007\001\001\000\026\005" +
    "\162\007\020\010\026\011\024\012\005\013\013\016\031" +
    "\020\022\021\027\024\007\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\117\001\001\000\004\015\177\001" +
    "\001\000\010\014\171\015\122\017\120\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\174\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\025" +
    "\203\026\205\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\206\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\212\001\001\000\004\006\211\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\214\001" +
    "\001\000\002\001\001\000\004\015\216\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\224\001\001\000\002" +
    "\001\001\000\004\006\226\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\014\233\015\122\017\120\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\241\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\244\001\001\000\002\001\001" +
    "\000\004\006\246\001\001\000\002\001\001\000\006\006" +
    "\250\007\251\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



public static AST arbol;


    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("ERROR Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
        Ventana pp = (Ventana)olc2.p1_201504242.OLC2P1_201504242.ven.ggetVentana();
        pp.listaError.add(new JError("Sintactico",(s.left),s.right,"Identificador "+s.value  +" no reconocido."));
    } 
 
    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("ERROR síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
        Ventana pp = (Ventana)olc2.p1_201504242.OLC2P1_201504242.ven.ggetVentana();
        pp.listaError.add(new JError("Sintactico No recuperado", s.left, s.right, "Identificador "+s.value  +" no reconocido."));
    }  


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= ini 
            {
              Object RESULT =null;
		
        System.out.println("**************** Se creo arbol - TERMINO GRAMATICA*********************");
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ini ::= instrucciones 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> e = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        parser.arbol = new AST(e);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= instrucciones instruccion 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = a;
        RESULT.addLast(b);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instrucciones ::= instruccion 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new LinkedList();
        RESULT.addLast(a);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BLOQUE_SENT ::= LLAIZQ instrucciones LLADER 
            {
              LinkedList<NodoAST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> e = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = e;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE_SENT",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BLOQUE_SENT ::= LLAIZQ LLADER 
            {
              LinkedList<NodoAST> RESULT =null;
		
        RESULT = new LinkedList();
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE_SENT",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLA_FUN ::= ID igual Tfuntion PARIZQ formal_parameters PARDER BLOQUE_SENT 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Simbolo> b = (LinkedList<Simbolo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> c = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
        //String id,Rol rol,LinkedList<Simbolo> parametrosFormales, LinkedList<NodoAST> sentencias,int,int
        RESULT  = new Funcion(a.toString()+"_"+b.size(),Rol.FUNCION,b,c,aleft,aright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLA_FUN",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECLA_FUN ::= ID igual Tfuntion PARIZQ PARDER BLOQUE_SENT 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> c = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
        //String id,Rol rol, LinkedList<NodoAST> sentencias,int,int
        RESULT  = new Funcion(a.toString()+"_0",Rol.FUNCION,c,aleft,aright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLA_FUN",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // formal_parameters ::= formal_parameters COMA formal_parameter 
            {
              LinkedList<Simbolo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Simbolo> a = (LinkedList<Simbolo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Simbolo b = (Simbolo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
        RESULT = a;
        RESULT.addLast(b);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("formal_parameters",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // formal_parameters ::= formal_parameter 
            {
              LinkedList<Simbolo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Simbolo a = (Simbolo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new LinkedList();
        RESULT.addLast(a);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("formal_parameters",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // formal_parameter ::= ID 
            {
              Simbolo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Simbolo(b.toString(),Rol.VECTOR);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("formal_parameter",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // formal_parameter ::= ID igual EXP 
            {
              Simbolo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Simbolo(b.toString(),Rol.VECTOR,a);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("formal_parameter",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ASIGNACION ::= ID igual EXP 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
        RESULT =  new Asignacion(new Identificador(a.toString(),aleft,aright,true),b,bleft,bright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ASIGNACION ::= ID PARIZQ LISTA_EXP PARDER igual EXP 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
        
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ASIGNACION ::= ID DIMENSION igual EXP 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<nodoExp> b = (LinkedList<nodoExp>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
        //ACCESO 
        //Identificador(String val,LinkedList<nodoExp> lista,boolean isAssign,int linea,int col)
        //Asignacion(Expresion variable, Expresion der, int linea, int col)
        Identificador ident = new Identificador(a.toString(),b,true,aleft,aright);
        RESULT =  new Asignacion(ident,c,cleft,cright);

    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ASIGNACION ::= ID igual EXP PTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        //RESULT = new Asignacion(new Var(a),b,aright,aleft);
        RESULT =  new Asignacion(new Identificador(a.toString(),aleft,aright,true),b,bleft,bright);

    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ASIGNACION ::= ID PARIZQ LISTA_EXP PARDER igual EXP PTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ASIGNACION ::= ID DIMENSION igual EXP PTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<nodoExp> b = (LinkedList<nodoExp>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        Identificador ident = new Identificador(a.toString(),b,true,aleft,aright);
        RESULT =  new Asignacion(ident,c,cleft,cright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DIMENSION ::= DIMENSION OPC_ACCESO 
            {
              LinkedList<nodoExp> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<nodoExp> a = (LinkedList<nodoExp>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		nodoExp b = (nodoExp)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = a;
        RESULT.addLast(b);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DIMENSION",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DIMENSION ::= OPC_ACCESO 
            {
              LinkedList<nodoExp> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		nodoExp a = (nodoExp)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new LinkedList();
        RESULT.addLast(a);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DIMENSION",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // OPC_ACCESO ::= CORIZQ EXP CORDER 
            {
              nodoExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new nodoExp(a,Acc.tipo1);   
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPC_ACCESO",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // OPC_ACCESO ::= CORIZQ CORIZQ EXP CORDER CORDER 
            {
              nodoExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new nodoExp(a,Acc.tipo2);   
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPC_ACCESO",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // OPC_ACCESO ::= CORIZQ EXP COMA EXP CORDER 
            {
              nodoExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new nodoExp(a,b,Acc.m1);    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPC_ACCESO",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // OPC_ACCESO ::= CORIZQ EXP COMA CORDER 
            {
              nodoExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new nodoExp(a,Acc.m2);      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPC_ACCESO",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OPC_ACCESO ::= CORIZQ COMA EXP CORDER 
            {
              nodoExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new nodoExp(a,Acc.m3);      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPC_ACCESO",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instruccion ::= DECLA_FUN 
            {
              NodoAST RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = ins;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instruccion ::= ASIGNACION 
            {
              NodoAST RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = ins;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instruccion ::= SENTENCIA_IF 
            {
              NodoAST RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = ins;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // instruccion ::= SENTENCIA_WHILE 
            {
              NodoAST RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = ins;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // instruccion ::= SENTENCIA_FOR 
            {
              NodoAST RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = ins;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // instruccion ::= SENTENCIA_DOWHILE 
            {
              NodoAST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = e; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // instruccion ::= Tbreak 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
            RESULT = new Break(aleft,aright);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // instruccion ::= Tcontinue 
            {
              NodoAST RESULT =null;
		 
            RESULT = new Continue();
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // instruccion ::= SENTENCIA_RETURN 
            {
              NodoAST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
            RESULT = e;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // instruccion ::= SENTENCIA_LLAMADA 
            {
              NodoAST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST e = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
            RESULT = e;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // instruccion ::= GRAFICA PARIZQ LISTA_EXP PARDER 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            
            if(a.equals("1")){
                RESULT = new grafPie(b,aleft,aright);
            }else if(a.equals("2")){
                RESULT = new grafBarras(b,aleft,aright);
            }else if(a.equals("3")){
                   RESULT = new grafHistograma(b,aleft,aright);
            }else if(a.equals("4")){
                if(b.size() == 5){
                    //linel
                    RESULT = new grafLineas(b,aleft,aright);

                }else if(b.size() == 8){
                    //dispercion

                }                   
            }
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // instruccion ::= SENTENCIA_DOWHILE PTCOMA 
            {
              NodoAST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = e; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // instruccion ::= Tbreak PTCOMA 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT = new Break(aleft,aright);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // instruccion ::= Tcontinue PTCOMA 
            {
              NodoAST RESULT =null;
		 
            RESULT = new Continue();
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // instruccion ::= SENTENCIA_RETURN PTCOMA 
            {
              NodoAST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 
            RESULT = e;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // instruccion ::= SENTENCIA_LLAMADA PTCOMA 
            {
              NodoAST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		NodoAST e = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 
            RESULT = e;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // instruccion ::= GRAFICA PARIZQ LISTA_EXP PARDER PTCOMA 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
            if(a.equals("1")){
                RESULT = new grafPie(b,aleft,aright);
            }else if(a.equals("2")){
                RESULT = new grafBarras(b,aleft,aright);
            }else if(a.equals("3")){
                   RESULT = new grafHistograma(b,aleft,aright);
            }else if(a.equals("4")){
                if(b.size() == 5){
                    //linel
                    RESULT = new grafLineas(b,aleft,aright);

                }else if(b.size() == 8){
                    //dispercion

                }                   
            }
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // instruccion ::= fantasmita 
            {
              NodoAST RESULT =null;
		 
            RESULT = new fantasmita();
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // GRAFICA ::= pie 
            {
              String RESULT =null;
		 RESULT = "1";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GRAFICA",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // GRAFICA ::= barplot 
            {
              String RESULT =null;
		 RESULT = "2";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GRAFICA",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // GRAFICA ::= hist 
            {
              String RESULT =null;
		 RESULT = "3";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GRAFICA",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // GRAFICA ::= plot 
            {
              String RESULT =null;
		 RESULT = "4";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GRAFICA",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCIA_LLAMADA ::= ID PARIZQ PARDER 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 
        RESULT = new Llama(a,aright,aleft);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_LLAMADA",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENTENCIA_LLAMADA ::= ID PARIZQ LISTA_EXP PARDER 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 
        if(a.equalsIgnoreCase("c")){
            RESULT = new funcionC(b,aleft,aright);
        }else if(a.equalsIgnoreCase("list")){
            RESULT = new GenerarList(b,aleft,aright);
        }else if(a.equalsIgnoreCase("print")){
            RESULT = new Print(b,aleft,aright);
        }else if(a.equalsIgnoreCase("matrix")){
            RESULT = new FuncionMatrix(b,aleft,aright);
        }else if(a.equalsIgnoreCase("typeof")){
            RESULT = new Typeof(b,aleft,aright);
        }else if(a.equalsIgnoreCase("length")){
            RESULT = new Length(b,aleft,aright);
        }else if(a.equalsIgnoreCase("nCol")){
            RESULT = new nMatrix("ncol",b,aleft,aright);
        }else if(a.equalsIgnoreCase("nRow")){
            RESULT = new nMatrix("nrow",b,aleft,aright);
        }else if(a.equalsIgnoreCase("StringLength")){
            RESULT = new Fstring(1,b,aleft,aright);
        }else if(a.equalsIgnoreCase("remove")){
            RESULT = new Fstring(2,b,aleft,aright);
        }else if(a.equalsIgnoreCase("toLowerCase")){
            RESULT = new Fstring(3,b,aleft,aright);
        }else if(a.equalsIgnoreCase("toUpperCase")){
            RESULT = new Fstring(4,b,aleft,aright);
        }else if(a.equalsIgnoreCase("trunk")){
            RESULT = new Fnum(1,b,aleft,aright);
        }else if(a.equalsIgnoreCase("round")){
            RESULT = new Fnum(2,b,aleft,aright);
        }else if(a.equalsIgnoreCase("mean")){
            RESULT = new Fnum(3,b,aleft,aright);
        }else if(a.equalsIgnoreCase("median")){
            RESULT = new Fnum(4,b,aleft,aright);
        }else if(a.equalsIgnoreCase("mode")){
            RESULT = new Fnum(5,b,aleft,aright);
        }else{
            RESULT = new Llama(a,b,aleft,aright);
        }
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_LLAMADA",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTENCIA_IF ::= Tif PARIZQ EXP PARDER BLOQUE_SENT 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new If(b,a);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENTENCIA_IF ::= Tif PARIZQ EXP PARDER BLOQUE_SENT Telse BLOQUE_SENT 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> c = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new If(b,a,c);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENTENCIA_IF ::= Tif PARIZQ EXP PARDER BLOQUE_SENT Telse SENTENCIA_IF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new If(b,a,c);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENTENCIA_WHILE ::= Twhile PARIZQ EXP PARDER BLOQUE_SENT 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new While(b,a,aright,aleft);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENTENCIA_FOR ::= Tfor PARIZQ ID Tin EXP PARDER BLOQUE_SENT 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> c = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            Identificador id = new Identificador(valor,valorleft,valorright,false);                    
            RESULT = new For(id,c,b,aleft,aright);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENTENCIA_DOWHILE ::= Tdo BLOQUE_SENT Twhile PARIZQ EXP PARDER 
            {
              Instruccion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT = new DoWhile(b,a,cleft,cright);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_DOWHILE",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENTENCIA_RETURN ::= Treturn PARIZQ EXP PARDER 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = new Return(a,aleft,aright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RETURN",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SENTENCIA_RETURN ::= Treturn 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Return(aleft,aright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RETURN",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // LISTA_EXP ::= LISTA_EXP COMA B 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = a;
        RESULT.addLast(b);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_EXP",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LISTA_EXP ::= B 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new LinkedList();
        RESULT.addLast(a);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_EXP",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // B ::= EXP igual EXP 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("B",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // B ::= EXP 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = a;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("B",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXP ::= MENOS EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Aritmetica(a,Operador.MENOS_UNARIO,aright,aleft); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXP ::= EXP Tor EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Logica(a, b, Operador.OR,aright,aleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXP ::= EXP POR EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Aritmetica(a, b, Operador.MULTIPLICACION,aright,aleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXP ::= EXP MODULO EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Aritmetica(a, b, Operador.MODULO,aright,aleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXP ::= EXP DIVIDIDO EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Aritmetica(a, b, Operador.DIVISION,aright,aleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXP ::= EXP MAS EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Aritmetica(a, b, Operador.SUMA,aright,aleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXP ::= EXP MENOS EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Aritmetica(a, b, Operador.RESTA,aright,aleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXP ::= EXP POTENCIA EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Aritmetica(a, b, Operador.POTENCIA,aright,aleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXP ::= EXP MAYOR EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Relacional(a, b, Operador.MAYOR_QUE,aright,aleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXP ::= EXP MAYORIGUAL EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Relacional(a, b, Operador.MAYOR_IGUAL,aright,aleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXP ::= EXP MENOR EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Relacional(a, b, Operador.MENOR_QUE,aright,aleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXP ::= EXP MENORIGUAL EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Relacional(a, b, Operador.MENOR_IGUAL,aright,aleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXP ::= EXP IGUALDAD EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Relacional(a, b, Operador.IGUAL_IGUAL,aright,aleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXP ::= EXP DIFERENTE EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Relacional(a, b, Operador.DIFERENTE_QUE,aright,aleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXP ::= EXP Tand EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Logica(a, b, Operador.AND,aright,aleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXP ::= Tnot EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= new Logica(a,Operador.NOT,aright,aleft); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXP ::= EXP ternario EXP dospuntos EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= new Ternaria(a, b,c,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXP ::= PARIZQ EXP PARDER 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT =a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXP ::= ID PARIZQ PARDER 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		RESULT = new Llama(a,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXP ::= ID PARIZQ LISTA_EXP PARDER 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 
        if(a.equalsIgnoreCase("c")){
            RESULT = new funcionC(b,aleft,aright);
        }else if(a.equalsIgnoreCase("list")){
            RESULT = new GenerarList(b,aleft,aright);
        }else if(a.equalsIgnoreCase("matrix")){
            RESULT = new FuncionMatrix(b,aleft,aright);
        }else if(a.equalsIgnoreCase("typeof")){
            RESULT = new Typeof(b,aleft,aright);
        }else if(a.equalsIgnoreCase("length")){
            RESULT = new Length(b,aleft,aright);
        }else if(a.equalsIgnoreCase("nCol")){
            RESULT = new nMatrix("ncol",b,aleft,aright);
        }else if(a.equalsIgnoreCase("nRow")){
            RESULT = new nMatrix("nrow",b,aleft,aright);
        }else if(a.equalsIgnoreCase("StringLength")){
            RESULT = new Fstring(1,b,aleft,aright);
        }else if(a.equalsIgnoreCase("remove")){
            RESULT = new Fstring(2,b,aleft,aright);
        }else if(a.equalsIgnoreCase("toLowerCase")){
            RESULT = new Fstring(3,b,aleft,aright);
        }else if(a.equalsIgnoreCase("toUpperCase")){
            RESULT = new Fstring(4,b,aleft,aright);
        }else if(a.equalsIgnoreCase("trunk")){
            RESULT = new Fnum(1,b,aleft,aright);
        }else if(a.equalsIgnoreCase("round")){
            RESULT = new Fnum(2,b,aleft,aright);
        }else if(a.equalsIgnoreCase("mean")){
            RESULT = new Fnum(3,b,aleft,aright);
        }else if(a.equalsIgnoreCase("median")){
            RESULT = new Fnum(4,b,aleft,aright);
        }else if(a.equalsIgnoreCase("mode")){
            RESULT = new Fnum(5,b,aleft,aright);
        }else{
            RESULT = new Llama(a,b,aleft,aright);
        }
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXP ::= ID 
            {
              Expresion RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Identificador(valor,valorleft,valorright,false);                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXP ::= ID DIMENSION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<nodoExp> b = (LinkedList<nodoExp>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT =  new Identificador(a.toString(),b,false,aleft,aright);                   
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXP ::= ENTERO 
            {
              Expresion RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer valor = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Literal((Object)valor, new Tipo(Tipos.INT),valorleft,valorright);    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXP ::= DECIMAL 
            {
              Expresion RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Double valor = (Double)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Literal((Object)valor, new Tipo(Tipos.DOUBLE),valorleft,valorright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXP ::= CAD 
            {
              Expresion RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Literal((Object)valor, new Tipo(Tipos.STRING),valorleft,valorright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXP ::= ttrue 
            {
              Expresion RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Literal((Object)true, new Tipo(Tipos.BOOL),valorleft,valorright);    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXP ::= tfalse 
            {
              Expresion RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Literal((Object)false, new Tipo(Tipos.BOOL),valorleft,valorright);   
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXP ::= Tnull 
            {
              Expresion RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Literal((Object)valor, new Tipo(Tipos.STRING),valorleft,valorright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXP ::= tdefault 
            {
              Expresion RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Literal((Object)valor, new Tipo(Tipos.DEFAULT),valorleft,valorright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
