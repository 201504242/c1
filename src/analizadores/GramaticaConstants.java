/* Generated By:JavaCC: Do not edit this line. GramaticaConstants.java */
/** Analizador de expresiones aritmeticas sencillas. */
package analizadores;


/** 
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface GramaticaConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int MIENTRAS = 1;
  /** RegularExpression Id. */
  int DO = 2;
  /** RegularExpression Id. */
  int FUNCION = 3;
  /** RegularExpression Id. */
  int RETORNO = 4;
  /** RegularExpression Id. */
  int FOR = 5;
  /** RegularExpression Id. */
  int BREAK = 6;
  /** RegularExpression Id. */
  int CONTINUE = 7;
  /** RegularExpression Id. */
  int SI = 8;
  /** RegularExpression Id. */
  int SINO = 9;
  /** RegularExpression Id. */
  int TRUE = 10;
  /** RegularExpression Id. */
  int FALSE = 11;
  /** RegularExpression Id. */
  int NULL = 12;
  /** RegularExpression Id. */
  int IN = 13;
  /** RegularExpression Id. */
  int DEFA = 14;
  /** RegularExpression Id. */
  int PCOMA = 15;
  /** RegularExpression Id. */
  int COMA = 16;
  /** RegularExpression Id. */
  int PARENI = 17;
  /** RegularExpression Id. */
  int PAREND = 18;
  /** RegularExpression Id. */
  int CORI = 19;
  /** RegularExpression Id. */
  int CORD = 20;
  /** RegularExpression Id. */
  int LLAVEI = 21;
  /** RegularExpression Id. */
  int LLAVED = 22;
  /** RegularExpression Id. */
  int TERNARIO = 23;
  /** RegularExpression Id. */
  int DOSPUNTOS = 24;
  /** RegularExpression Id. */
  int MAS = 25;
  /** RegularExpression Id. */
  int MENOS = 26;
  /** RegularExpression Id. */
  int POR = 27;
  /** RegularExpression Id. */
  int MODULO = 28;
  /** RegularExpression Id. */
  int DIV = 29;
  /** RegularExpression Id. */
  int POTENCIA = 30;
  /** RegularExpression Id. */
  int IGUAL = 31;
  /** RegularExpression Id. */
  int MENORQUE = 32;
  /** RegularExpression Id. */
  int MAYORQUE = 33;
  /** RegularExpression Id. */
  int MENORIGUAL = 34;
  /** RegularExpression Id. */
  int MAYORIGUAL = 35;
  /** RegularExpression Id. */
  int IGUALACION = 36;
  /** RegularExpression Id. */
  int DIFERENCIACION = 37;
  /** RegularExpression Id. */
  int AND = 38;
  /** RegularExpression Id. */
  int OR = 39;
  /** RegularExpression Id. */
  int NOT = 40;
  /** RegularExpression Id. */
  int NUMERO = 41;
  /** RegularExpression Id. */
  int DECIMAL = 42;
  /** RegularExpression Id. */
  int ID = 43;
  /** RegularExpression Id. */
  int STRING = 53;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int STRING_STATE = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"while\"",
    "\"Do\"",
    "\"function\"",
    "\"Return\"",
    "\"for\"",
    "\"Break\"",
    "\"continue\"",
    "\"if\"",
    "\"else\"",
    "\"true\"",
    "\"false\"",
    "\"null\"",
    "\"in\"",
    "\"default\"",
    "\";\"",
    "\",\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\"?\"",
    "\":\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"%%\"",
    "\"/\"",
    "\"^\"",
    "\"=\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"==\"",
    "\"!=\"",
    "\"&\"",
    "\"|\"",
    "\"!\"",
    "<NUMERO>",
    "<DECIMAL>",
    "<ID>",
    "\"\\\"\"",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\n\"",
    "<token of kind 49>",
    "<token of kind 50>",
    "<token of kind 51>",
    "<token of kind 52>",
    "\"\\\"\"",
  };

}
