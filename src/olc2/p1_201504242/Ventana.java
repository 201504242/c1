/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package olc2.p1_201504242;
import analizadores.Gramatica;
import analizadores.ParseException;
import analizadores.TokenMgrError;
import ast.AST;
import ast.Expresion;
import ast.Instruccion;
import ast.NodoAST;
import ast.instrucciones.funciones.ListVar;
import entorno.Entorno;
import entorno.Simbolo;
import entorno.Tipo;
import java.awt.Desktop;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
//import olc2.p1_201504242.OLC2P1_201504242;



/**
 *
 * @author p_ab1
 */
public class Ventana extends javax.swing.JFrame {
    AST arbol;
    AST arbolJavaCC;

    int index;
    String cad;
    public LinkedList<JError> listaError = new LinkedList();
    Entorno Global = null;

    /**
     * Creates new form Ventana
     */
    public Ventana() {
        initComponents();
        setLocationRelativeTo(null);
    }
    
    public static Ventana ggetVentana() {
        return olc2.p1_201504242.OLC2P1_201504242.ven;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        Entrada = new javax.swing.JTextArea();
        AnalizarBTN = new javax.swing.JButton();
        analizarJavacc = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        Consola = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        MenuAbrir = new javax.swing.JMenuItem();
        MenuGuardar = new javax.swing.JMenuItem();
        MenuGuardarComo = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        MenuCup = new javax.swing.JMenuItem();
        MenuJavacc = new javax.swing.JMenuItem();
        MenuTS = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        MenuAST = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Entrada.setColumns(20);
        Entrada.setRows(5);
        jScrollPane1.setViewportView(Entrada);

        AnalizarBTN.setText("Cup y Flex");
        AnalizarBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AnalizarBTNActionPerformed(evt);
            }
        });

        analizarJavacc.setText("JavaCC");
        analizarJavacc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analizarJavaccActionPerformed(evt);
            }
        });

        Consola.setEditable(false);
        Consola.setBackground(new java.awt.Color(51, 51, 51));
        Consola.setColumns(20);
        Consola.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 12)); // NOI18N
        Consola.setForeground(new java.awt.Color(255, 255, 255));
        Consola.setRows(5);
        jScrollPane2.setViewportView(Consola);

        jLabel1.setText(".");

        jMenu1.setText("Archivo");

        MenuAbrir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        MenuAbrir.setText("Abrir");
        jMenu1.add(MenuAbrir);

        MenuGuardar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        MenuGuardar.setText("Guardar");
        jMenu1.add(MenuGuardar);

        MenuGuardarComo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        MenuGuardarComo.setText("Guardar Como");
        jMenu1.add(MenuGuardarComo);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Reporte");

        jMenu3.setText("Errores");

        MenuCup.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        MenuCup.setText("Cup y Flex");
        MenuCup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuCupActionPerformed(evt);
            }
        });
        jMenu3.add(MenuCup);

        MenuJavacc.setText("JAVACC");
        jMenu3.add(MenuJavacc);

        jMenu2.add(jMenu3);

        MenuTS.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_MASK));
        MenuTS.setText("Tabla de Simbolos");
        MenuTS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuTSActionPerformed(evt);
            }
        });
        jMenu2.add(MenuTS);

        jMenuItem1.setText("Tabla de Funciones");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        MenuAST.setText("AST");
        MenuAST.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuASTActionPerformed(evt);
            }
        });
        jMenu2.add(MenuAST);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 762, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(analizarJavacc)
                            .addComponent(AnalizarBTN))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(AnalizarBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(analizarJavacc)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AnalizarBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AnalizarBTNActionPerformed
        limpiar();
        String entra = "entrada.txt";
        File archivo = null;
        FileReader fr = null;
        BufferedReader br = null;
        
        FileWriter fichero = null;
        PrintWriter pw = null;
        try {
            archivo = new File (entra);
            fr = new FileReader (archivo);
            br = new BufferedReader(fr);
            String linea;
            
            fichero = new FileWriter("c:/"+entra);
            pw = new PrintWriter(fichero);

            while((linea=br.readLine())!=null) {
                if (linea.contains("=>")) {
                    int intIndex = linea.indexOf("(");
                    if (intIndex != -1) {
                        linea = linea.replace("=>", "");
                        for (int i = 0; i < linea.toCharArray().length; i++) {
                            if(i == intIndex){
                                pw.print("function(");
                            }else{
                                pw.print(linea.charAt(i));                            
                            }
                        }
                    pw.println("");
                    }                    
                }else{
                    pw.println(linea);
                }
                
            }      
        }catch(IOException e){
            e.printStackTrace();
        }finally{
            try{                    
                if( null != fr ){   
                    fr.close();  
                    fichero.close();
                }                  
            }catch (IOException e2){ 
                e2.printStackTrace();
            }
        } 
            
        try {
            analizadores.Sintactico pars;           
            pars = new analizadores.Sintactico(new analizadores.Lexico(new FileInputStream("c:/"+entra)));
            pars.parse();  
            arbol = pars.arbol;
            if (arbol != null) 
            {
                arbol.ejecutar();
                Global = arbol.getGlobal();
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("FileNotFoundException de entrada.");
            System.out.println("Causa: "+ex.getCause());
        } catch (Exception ex) {
            Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("Error fatal en compilación de entrada.");
            System.out.println("Causa: "+ex.getCause());
        }
        jLabel1.setText("Errores CUP: "+listaError.size());
    }//GEN-LAST:event_AnalizarBTNActionPerformed

    private void analizarJavaccActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analizarJavaccActionPerformed
        try {
            Gramatica parser = new Gramatica(new BufferedReader(new FileReader("entradaJavaCC.txt")));
            arbolJavaCC = parser.Analizar();
            arbolJavaCC.ejecutar();
        } catch (FileNotFoundException ex) {            
            Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
        } catch(TokenMgrError e){
            System.err.println(e.getMessage());
        }

    }//GEN-LAST:event_analizarJavaccActionPerformed

    private void MenuCupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuCupActionPerformed
        // TODO add your handling code here:
        if (listaError.size() > 0 ) {
            generarErrores();
        }else{
            JOptionPane.showMessageDialog(null, "Lista Error VACIO", "Ocurrion un Error", JOptionPane.ERROR_MESSAGE);            
        }
        
    }//GEN-LAST:event_MenuCupActionPerformed

    private void MenuTSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuTSActionPerformed
        // TODO add your handling code here:
        if (Global != null) {
            generarTS();            
        }
        else{
            JOptionPane.showMessageDialog(null, "Entorno VACIO", "Ocurrion un Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_MenuTSActionPerformed

    private void MenuASTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuASTActionPerformed
        // TODO add your handling code here:
        if (arbol != null) {
            String grafica = arbol.Graficar();
            Graficar(grafica, "AST");
            //JOptionPane.showMessageDialog(null, "AST generado Correctamente", "EXITO~~~!", JOptionPane.WARNING_MESSAGE);
        }
        else{
            JOptionPane.showMessageDialog(null, "AST VACIO", "Ocurrion un Error", JOptionPane.ERROR_MESSAGE);

        }
    }//GEN-LAST:event_MenuASTActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        if (Global != null) {
            generarTSFun();            
        }
        else{
            JOptionPane.showMessageDialog(null, "Entorno VACIO", "Ocurrion un Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ventana().setVisible(true);
            }
        });
    }
    
    //METODO PARA AGREGAR A LA CONSOLA DE LA PANTALLA
    public void agregarConsola(String cad){
        Consola.setText(Consola.getText()+""+ cad + "\n");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AnalizarBTN;
    private javax.swing.JTextArea Consola;
    private javax.swing.JTextArea Entrada;
    private javax.swing.JMenuItem MenuAST;
    private javax.swing.JMenuItem MenuAbrir;
    private javax.swing.JMenuItem MenuCup;
    private javax.swing.JMenuItem MenuGuardar;
    private javax.swing.JMenuItem MenuGuardarComo;
    private javax.swing.JMenuItem MenuJavacc;
    private javax.swing.JMenuItem MenuTS;
    private javax.swing.JButton analizarJavacc;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables

    private void Graficar(String arbol, String nombreArchivo) {
  
        
        try {
            FileWriter fichero = null;
            PrintWriter pw = null;
            String archivo = nombreArchivo + ".dot";
            fichero = new FileWriter(archivo);
            pw = new PrintWriter(fichero);
            pw.println(arbol);
            fichero.close();            
        } catch (IOException ex) {
            System.err.println(ex.getMessage());
        }
        try{
            String dotPath = "C:\\Program Files (x86)\\Graphviz2.38\\bin\\dot.exe";
            //path del archivo creado con el codigo del graphviz que queremos
            String fileInputPath = nombreArchivo+".dot";
            //path de salida del grafo, es decir el path de la imagen que vamos a crear con graphviz
            String fileOutputPath = nombreArchivo+".jpg";
            //tipo de imagen de salida, en este caso es jpg
            String tParam = "-Tjpg";
            String tOParam = "-o";
            //recordemos el comando en la consola de windows: C:\Archivos de programa\Graphviz 2.21\bin\dot.exe -Tjpg grafo1.txt -o grafo1.jpg Esto es lo que concatenamos en el vector siguiente:
            String[] cmd = new String[5];
            cmd[0] = dotPath;
            cmd[1] = tParam;
            cmd[2] = fileInputPath;
            cmd[3] = tOParam;
            cmd[4] = fileOutputPath;
            Runtime rt = Runtime.getRuntime();
            rt.exec( cmd );
            
            File objetofile = new File ("AST.jpg");
            Desktop.getDesktop().open(objetofile);
        } catch (IOException ioe) {
            System.err.println(ioe.getMessage());
        }
        
    }

    public void limpiar(){
        listaError.clear();
        Consola.setText("");
        
    }
    
     private void generarTS() {
         
        FileWriter filewriter = null;
        PrintWriter printw = null;
        try{
            filewriter = new FileWriter("TS.html");//declarar el archivo
            printw = new PrintWriter(filewriter);//declarar un impresor

            printw.println("<html>");
            printw.println("<head><title>Tabla de Simbolos</title><style type=\"text/css\">\n" +
            "body {\n" +
            " padding-left: 11em; \n" +
            "font-family: Georgia, \"Times New Roman\",Times, serif; \n" +
            "color: purple; \n" +
            "background-color: #d8da3d }\n" +
            "h1 { font-family: Helvetica, Geneva, Arial,SunSans-Regular, sans-serif }  \n" +
            "table { border-collapse: collapse; width: 80%;}\n" +
            "th, td { text-align: left;padding: 8px;}\n" +
            "tr:nth-child(even){ background-color: #f2f2f2}\n" +
            "th {background-color: #4CAF50;color: white;}\n" +
            "</style></head>");     

            //si quisieramos escribir una cadena que vide de una lista o 
            //de una variable lo concatenamos
            printw.println("<h1><font color=\"navy\">Tabla de Simbolos</font></h1>");
            printw.println("<h3><font color=\"navy\">Variables </font></h3>");
            printw.println("<table>");            
            printw.println("<tr><th>Variable</th><th>Tipo</th><th>Rol</th><th>Valor</th></tr>");
            
                Enumeration<Simbolo> enumeration = Global.getTabla().elements();
                while (enumeration.hasMoreElements())
                {
                    Simbolo sim = (Simbolo)enumeration.nextElement();
                    Tipo t = sim.getTipo();
                    Object val = sim.getValor();
                    val = traerString(val);
//                    if (val instanceof Object[]) {
//                        Object[] s = (Object[])val;
//                        val = traerString(val);
//                    }
                    printw.println("<tr><td>"+ sim.getIdentificador()+"</td><td>"+((t==null) ? "null" : t.getTipoPrimitivo())
                    +"</td><td>"+sim.getRol()+"</td><td>"+((val==null) ? "null" : val.toString())+"</td></tr>");
                }
            printw.println("</table>");    
            printw.println("</body>");
            printw.println("</html>");

            //no devemos olvidar cerrar el archivo para que su lectura sea correcta
            printw.close();//cerramos el archivo

        }   catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "ERROR al generar archivo de errores");        
        }
        try {
            File objetofile = new File ("TS.html");
            Desktop.getDesktop().open(objetofile);
        } catch (IOException exx) {
            JOptionPane.showMessageDialog(null, "No existe errores.html");
        }
    }

    
     private void generarTSFun() {
         
        FileWriter filewriter = null;
        PrintWriter printw = null;
        try{
            filewriter = new FileWriter("TS.html");//declarar el archivo
            printw = new PrintWriter(filewriter);//declarar un impresor

            printw.println("<html>");
            printw.println("<head><title>Tabla de Funciones</title><style type=\"text/css\">\n" +
            "body {\n" +
            " padding-left: 11em; \n" +
            "font-family: Georgia, \"Times New Roman\",Times, serif; \n" +
            "color: purple; \n" +
            "background-color: #d8da3d }\n" +
            "h1 { font-family: Helvetica, Geneva, Arial,SunSans-Regular, sans-serif }  \n" +
            "table { border-collapse: collapse; width: 80%;}\n" +
            "th, td { text-align: left;padding: 8px;}\n" +
            "tr:nth-child(even){ background-color: #f2f2f2}\n" +
            "th {background-color: #4CAF50;color: white;}\n" +
            "</style></head>");     

            //si quisieramos escribir una cadena que vide de una lista o 
            //de una variable lo concatenamos
            printw.println("<h1><font color=\"navy\">Tabla Funciones</font></h1>");
            printw.println("<h3><font color=\"navy\">Funciones </font></h3>");
            printw.println("<table>");            
            printw.println("<tr><th>Variable</th><th>Tipo</th><th>Rol</th><th>Valor</th></tr>");
            
                Enumeration<Simbolo> enumeration = Global.getFunciones().elements();
                while (enumeration.hasMoreElements())
                {
                    Simbolo sim = (Simbolo)enumeration.nextElement();
                    Tipo t = sim.getTipo();
                    Object val = sim.getValor();
                    if (val instanceof Object[]) {
                        Object[] s = (Object[])val;
                        val = Arrays.toString(s);
                    }
                    printw.println("<tr><td>"+ sim.getIdentificador()+"</td><td>"+((t==null) ? "null" : t.getTipoPrimitivo())
                    +"</td><td>"+sim.getRol()+"</td><td>"+((val==null) ? "null" : val.toString())+"</td></tr>");
                }
            printw.println("</table>");    
            printw.println("</body>");
            printw.println("</html>");

            //no devemos olvidar cerrar el archivo para que su lectura sea correcta
            printw.close();//cerramos el archivo

        }   catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "ERROR al generar archivo de errores");        
        }
        try {
            File objetofile = new File ("TS.html");
            Desktop.getDesktop().open(objetofile);
        } catch (IOException exx) {
            JOptionPane.showMessageDialog(null, "No existe errores.html");
        }
    }

     
    private void generarErrores() {
        FileWriter filewriter = null;
        PrintWriter printw = null;
        try{
            filewriter = new FileWriter("errores.html");//declarar el archivo
            printw = new PrintWriter(filewriter);//declarar un impresor

            printw.println("<html>");
            printw.println("<head><title>REPORTES DE ERRORES</title><style type=\"text/css\">\n" +
            "body {\n" +
            " padding-left: 11em; \n" +
            "font-family: Georgia, \"Times New Roman\",Times, serif; \n" +
            "color: purple; \n" +
            "background-color: #d8da3d }\n" +
            "h1 { font-family: Helvetica, Geneva, Arial,SunSans-Regular, sans-serif }  \n" +
            "table { border-collapse: collapse; width: 80%;}\n" +
            "th, td { text-align: left;padding: 8px;}\n" +
            "tr:nth-child(even){ background-color: #f2f2f2}\n" +
            "th {background-color: #4CAF50;color: white;}\n" +
            "</style></head>");     

            //si quisieramos escribir una cadena que vide de una lista o 
            //de una variable lo concatenamos
            printw.println("<center><h1><font color=\"navy\">REPORTE DE ERRORES</font></h1></center>");
            Date date = new Date();
            DateFormat hourdateFormat = new SimpleDateFormat("HH:mm:ss dd/MM/yyyy");
            printw.println("<h3><font color=\"navy\">Errores - "+hourdateFormat.format(date)+"</font></h3>");
            printw.println("<table>");            
            printw.println("<tr><th>Linea</th><th>Columna</th><th>Tipo</th><th>Mensaje</th></tr>");
            for(JError e: listaError) {
                printw.println("<tr><td>"+e.getLinea()+"</td><td>"+e.getColumna()+"</td><td>"+e.getTipoError()+"</td><td>"+e.getDesc()+"</td></tr>");
            }
            printw.println("</table>");    
            printw.println("</body>");
            printw.println("</html>");

            //no devemos olvidar cerrar el archivo para que su lectura sea correcta
            printw.close();//cerramos el archivo

          //  System.out.println("Generado exitosamente");//si todo sale bien mostramos un mensaje de guardado exitoso

        }   catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "ERROR al generar archivo de errores");        
        }
        try {
            File objetofile = new File ("errores.html");
            Desktop.getDesktop().open(objetofile);
        } catch (IOException exx) {
            JOptionPane.showMessageDialog(null, "No existe errores.html");
        }
    }

    private Object traerString(Object o) {
            if (o instanceof ListVar) 
            {
                ListVar s = (ListVar)o;
                String cad = "";
                for (int i = 0; i < s.size(); i++) {
                    if (s.get(i) instanceof Object[]) {
                        cad = cad + Arrays.toString((Object[])s.get(i));
                    }
                    else{
                        cad = i ==0 ? ""+s.get(i) : cad + (","+s.get(i));
                    }
                    
                }
                //System.out.println("");
                return ("["+cad+"]");
            }
            else if(o instanceof Object[][])
            {
                Object [][] m = (Object[][]) o;
                String cad = "";
                for (Object[] row : m){
                    //System.out.println(Arrays.toString(row)); 
                    cad = cad + (Arrays.toString(row));
                } 
                return cad;
            }
            else if (o instanceof Object[]) {
                Object[] s = (Object[])o;
                
                return (Arrays.toString(s));
                
                //System.out.println(Arrays.toString(s));
            }
            else if (o != null) {
                return (o.toString());
             //  System.out.println(o.toString());
            }
        return null;
    }

}
