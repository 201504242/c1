/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package olc2.p1_201504242;
import analizadores.Gramatica;
import analizadores.ParseException;
import analizadores.TokenMgrError;
import ast.AST;
import ast.NodoAST;
import ast.instrucciones.funciones.ListVar;
import entorno.Entorno;
import entorno.Simbolo;
import entorno.Tipo;
import java.awt.Component;
import java.awt.Desktop;
import java.awt.Point;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.io.StringReader;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.Enumeration;
import java.util.LinkedList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.text.Caret;
import org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

/**
 *
 * @author p_ab1
 */
public class Ventana extends javax.swing.JFrame {
    AST arbol;
    AST arbolJavaCC;
    boolean tipo = true; //true = cup y  Flex | false = JAVACC
    int index;
    String cad;
    public LinkedList<JError> listaError = new LinkedList();
    Entorno Global = null;
    int pes = 0;
    String path = null;
    
    /**
     * Creates new form Ventana
     */
    public Ventana() {
        initComponents();
        setLocationRelativeTo(null);
    }
    
    public static Ventana ggetVentana() {
        return olc2.p1_201504242.OLC2P1_201504242.ven;
    }
    
    public void agregarLabel(String cad){
        filCol.setText(""+ cad + "\n");
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        AnalizarBTN = new javax.swing.JButton();
        analizarJavacc = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        Consola = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        filCol = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        MenuAbrir = new javax.swing.JMenuItem();
        MenuGuardar = new javax.swing.JMenuItem();
        MenuGuardarComo = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        MenuCup = new javax.swing.JMenuItem();
        MenuTS = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        MenuAST = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        NuevaPesta = new javax.swing.JMenuItem();
        CerrarPesta = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        AnalizarBTN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ima/cup.jpg"))); // NOI18N
        AnalizarBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AnalizarBTNActionPerformed(evt);
            }
        });

        analizarJavacc.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ima/javacc.png"))); // NOI18N
        analizarJavacc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analizarJavaccActionPerformed(evt);
            }
        });

        Consola.setEditable(false);
        Consola.setBackground(new java.awt.Color(51, 51, 51));
        Consola.setColumns(20);
        Consola.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 12)); // NOI18N
        Consola.setForeground(new java.awt.Color(255, 255, 255));
        Consola.setRows(5);
        jScrollPane2.setViewportView(Consola);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel1.setText(".");

        filCol.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        filCol.setText("Line: 0 Col:0");

        jMenu1.setText("Archivo");

        MenuAbrir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        MenuAbrir.setText("Abrir");
        MenuAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuAbrirActionPerformed(evt);
            }
        });
        jMenu1.add(MenuAbrir);

        MenuGuardar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        MenuGuardar.setText("Guardar");
        MenuGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuGuardarActionPerformed(evt);
            }
        });
        jMenu1.add(MenuGuardar);

        MenuGuardarComo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        MenuGuardarComo.setText("Guardar Como");
        MenuGuardarComo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuGuardarComoActionPerformed(evt);
            }
        });
        jMenu1.add(MenuGuardarComo);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Reporte");

        jMenu3.setText("Errores");

        MenuCup.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        MenuCup.setText("HTML");
        MenuCup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuCupActionPerformed(evt);
            }
        });
        jMenu3.add(MenuCup);

        jMenu2.add(jMenu3);

        MenuTS.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_MASK));
        MenuTS.setText("Tabla de Simbolos");
        MenuTS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuTSActionPerformed(evt);
            }
        });
        jMenu2.add(MenuTS);

        jMenuItem1.setText("Tabla de Funciones");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        MenuAST.setText("AST");
        MenuAST.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuASTActionPerformed(evt);
            }
        });
        jMenu2.add(MenuAST);

        jMenuBar1.add(jMenu2);

        jMenu4.setText("Pesta√±as");

        NuevaPesta.setText("Nueva");
        NuevaPesta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NuevaPestaActionPerformed(evt);
            }
        });
        jMenu4.add(NuevaPesta);

        CerrarPesta.setText("Cerrar");
        CerrarPesta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CerrarPestaActionPerformed(evt);
            }
        });
        jMenu4.add(CerrarPesta);

        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 929, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 742, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(filCol)
                            .addComponent(analizarJavacc, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(AnalizarBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 209, Short.MAX_VALUE))))
                .addGap(18, 18, 18))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTabbedPane1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(filCol)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(analizarJavacc, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addComponent(AnalizarBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 66, Short.MAX_VALUE)))
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AnalizarBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AnalizarBTNActionPerformed
        if (jTabbedPane1.getSelectedComponent() != null) {
            limpiar();
            String textoEntrada = (((Editor)jTabbedPane1.getSelectedComponent()).getCodigo() );
            archivo(textoEntrada);      
            tipo = true;    
            try {
                analizadores.Sintactico pars;           
                pars = new analizadores.Sintactico(new analizadores.Lexico(new FileInputStream("C:\\Users\\p_ab1\\Desktop\\Archivos\\entrada.txt")));
                pars.parse();  
                arbol = pars.arbol;
                if (arbol != null) 
                {
                    arbol.ejecutar();
                    Global = arbol.getGlobal();
                }
            } catch (FileNotFoundException ex) {            
                JOptionPane.showMessageDialog(null, "No encontro Archivo", "Error", JOptionPane.ERROR_MESSAGE);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "No encontro Archivo", "Error", JOptionPane.ERROR_MESSAGE);
            }
            jLabel1.setText("Errores CUP: "+listaError.size());
        }else{
            JOptionPane.showMessageDialog(null, "Seleccione Tab", "Error", JOptionPane.ERROR_MESSAGE);

        }
    }//GEN-LAST:event_AnalizarBTNActionPerformed

    private void analizarJavaccActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analizarJavaccActionPerformed
        if (jTabbedPane1.getSelectedComponent() != null) {
            Gramatica parser = null;
            limpiar();
            String textoEntrada = (((Editor)jTabbedPane1.getSelectedComponent()).getCodigo() );
            archivo(textoEntrada); 
            tipo = false;
            try {
                InputStream inputstream = new FileInputStream("C:\\Users\\p_ab1\\Desktop\\Archivos\\entrada.txt");
                parser = new Gramatica(inputstream,"utf-8");
                LinkedList<NodoAST> instruccionsCC = parser.Analizar();
                arbolJavaCC = new AST(instruccionsCC);
                if (arbolJavaCC != null) {
                    arbolJavaCC.ejecutar();
                    Global = arbolJavaCC.getGlobal();
                }
            } catch (ParseException ex) {
                Ventana.ggetVentana().listaError.add(new JError("Ejecucion",0,0,"Mensaje: "+ex.getMessage()));
                //Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
            } catch(TokenMgrError e){
                Ventana.ggetVentana().listaError.add(new JError("Ejecucion",0,0,"Mensaje: "+e.getMessage()));
                System.err.println(e.getMessage());
            } catch (FileNotFoundException ex) {
                JOptionPane.showMessageDialog(null, "No encontro Archivo", "Error", JOptionPane.ERROR_MESSAGE);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "No encontro Archivo IO", "Error", JOptionPane.ERROR_MESSAGE);
            }
            jLabel1.setText("Errores JAVACC: "+listaError.size());
        }else{
            JOptionPane.showMessageDialog(null, "Seleccione TAB: JAVACC", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_analizarJavaccActionPerformed

    private void MenuCupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuCupActionPerformed
        // TODO add your handling code here:
        if (listaError.size() > 0 ) {
            generarErrores();
        }else{
            JOptionPane.showMessageDialog(null, "Lista Error VACIO", "Ocurrion un Error", JOptionPane.ERROR_MESSAGE);            
        }        
    }//GEN-LAST:event_MenuCupActionPerformed

    private void MenuTSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuTSActionPerformed
        // TODO add your handling code here:
        //CUP y FLEX
        if (tipo) {
            if (Global != null) {
                generarTS();            
            }
            else{
                JOptionPane.showMessageDialog(null, "Entorno CUP VACIO", "Ocurrion un Error", JOptionPane.ERROR_MESSAGE);
            }
        //JAVACC
        }else{
            if (Global != null) {
                generarTS();            
            }
            else{
                JOptionPane.showMessageDialog(null, "Entorno JAVACC VACIO", "Ocurrion un Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_MenuTSActionPerformed

    private void MenuASTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuASTActionPerformed

        //CUP y FLEX
        if (tipo) {
            if (arbol != null) {
                String grafica = arbol.Graficar();
                Graficar(grafica, "AST");
                //JOptionPane.showMessageDialog(null, "AST generado Correctamente", "EXITO~~~!", JOptionPane.WARNING_MESSAGE);
            }
            else{
                JOptionPane.showMessageDialog(null, "AST CUP VACIO", "Ocurrion un Error", JOptionPane.ERROR_MESSAGE);

            }
        }
        //JAVACC
        else{
            if (arbolJavaCC != null) {
                String grafica = arbolJavaCC.Graficar();
                Graficar(grafica, "AST");
                //JOptionPane.showMessageDialog(null, "AST generado Correctamente", "EXITO~~~!", JOptionPane.WARNING_MESSAGE);
            }
            else{
                JOptionPane.showMessageDialog(null, "AST JAVACC VACIO", "Ocurrion un Error", JOptionPane.ERROR_MESSAGE);

            }
        }
        
    }//GEN-LAST:event_MenuASTActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        if (tipo) {
            if (Global != null) {
                generarTSFun();            
            }
            else{
                JOptionPane.showMessageDialog(null, "Funciones CUP VACIO", "Ocurrion un Error", JOptionPane.ERROR_MESSAGE);
            }
        }else{
            if (Global != null) {
                generarTSFun();            
            }
            else{
                JOptionPane.showMessageDialog(null, "Funciones JAVACC VACIO", "Ocurrion un Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void NuevaPestaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NuevaPestaActionPerformed
        // TODO add your handling code here:
        Editor editor;
        try {
            editor = new Editor(new RSyntaxTextArea());
            this.jTabbedPane1.add("Nueva"+pes,editor);
            pes++;
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "No se puede Agregar Mas. "+ex.getMessage(), "Ocurrion un Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_NuevaPestaActionPerformed

    private void CerrarPestaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CerrarPestaActionPerformed
        // TODO add your handling code here:
        Component selected = jTabbedPane1.getSelectedComponent(); 
        if (selected != null) { 
            jTabbedPane1.remove(selected);
        }
    }//GEN-LAST:event_CerrarPestaActionPerformed

    private void MenuAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuAbrirActionPerformed
        // TODO add your handling code here:
    try 
    {
        JFileChooser selectorArchivos = new JFileChooser();
        selectorArchivos.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        int resultado = selectorArchivos.showOpenDialog(this);
        if (resultado == JFileChooser.APPROVE_OPTION)
        {
            File archivo = selectorArchivos.getSelectedFile();
            path = archivo.getAbsolutePath();
            Editor editor = new Editor(archivo,new RSyntaxTextArea());
            this.jTabbedPane1.add(""+archivo.getName(),editor);
        }        

    }catch(Exception ex )
    {
        JOptionPane.showMessageDialog(null, "No se puede Abrir: "+ex.getMessage(), "Ocurrion un Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_MenuAbrirActionPerformed

    private void MenuGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuGuardarActionPerformed
        // TODO add your handling code here:
        if (path != null) {
            FileWriter fichero = null;
            PrintWriter pw = null;
            File archivo = new File(path);
            try 
            {
                String fr = (((Editor)jTabbedPane1.getSelectedComponent()).getCodigo() ); 
                
                fichero = new FileWriter(archivo);
                pw = new PrintWriter(fichero);
                pw.print(fr);         
                fichero.close();   
                pw.close();
                JOptionPane.showMessageDialog(null, "Guadardado en: "+this.path, "Guardado", JOptionPane.INFORMATION_MESSAGE);

            }catch(IOException ex ){
                JOptionPane.showMessageDialog(null, "No se puede Guadar: "+ex.getMessage(), "Ocurrion un Error", JOptionPane.ERROR_MESSAGE);
            }finally{
                try{                    
                    if( null != pw ){   
                        pw.close();
                        fichero.close(); 
                    }                  
                }catch (IOException e2){ 
                    e2.printStackTrace();
                }
            }    
        }else{
            JOptionPane.showMessageDialog(null, "No se puede Guadar, no tiene ninguna ruta abierta", "Ocurrion un Error", JOptionPane.ERROR_MESSAGE);

        }
    }//GEN-LAST:event_MenuGuardarActionPerformed

    private void MenuGuardarComoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuGuardarComoActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        chooser.setApproveButtonText("Guardar Como");
        chooser.showOpenDialog(null);
        File archivo=chooser.getSelectedFile();

        try{
            String fr = (((Editor)jTabbedPane1.getSelectedComponent()).getCodigo() ); 
            String text=fr;
            java.io.FileWriter fileWriter=new java.io.FileWriter(archivo.getAbsoluteFile());
            java.io.BufferedWriter br = new java.io.BufferedWriter(fileWriter);
            br.write(text);
            br.close();
            JOptionPane.showMessageDialog(null, "Guadardado Como en: "+archivo.getAbsoluteFile(), "Guardado", JOptionPane.INFORMATION_MESSAGE);
        }catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "No se puede Guadar Como", "Ocurrion un Error", JOptionPane.ERROR_MESSAGE);
        }
            
        
    }//GEN-LAST:event_MenuGuardarComoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ventana().setVisible(true);
            }
        });
    }
    
    //METODO PARA AGREGAR A LA CONSOLA DE LA PANTALLA
    public void agregarConsola(String cad){
        Consola.setText(Consola.getText()+""+ cad + "\n");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AnalizarBTN;
    private javax.swing.JMenuItem CerrarPesta;
    private javax.swing.JTextArea Consola;
    private javax.swing.JMenuItem MenuAST;
    private javax.swing.JMenuItem MenuAbrir;
    private javax.swing.JMenuItem MenuCup;
    private javax.swing.JMenuItem MenuGuardar;
    private javax.swing.JMenuItem MenuGuardarComo;
    private javax.swing.JMenuItem MenuTS;
    private javax.swing.JMenuItem NuevaPesta;
    private javax.swing.JButton analizarJavacc;
    private javax.swing.JLabel filCol;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables

    private void Graficar(String arbol, String nombreArchivo) {
  
        
        try {
            FileWriter fichero = null;
            PrintWriter pw = null;
            String archivo = nombreArchivo + ".dot";
            fichero = new FileWriter(archivo);
            pw = new PrintWriter(fichero);
            pw.println(arbol);
            fichero.close();            
        } catch (IOException ex) {
            System.err.println(ex.getMessage());
        }
        try{
            String dotPath = "C:\\Program Files (x86)\\Graphviz2.38\\bin\\dot.exe";
            //path del archivo creado con el codigo del graphviz que queremos
            String fileInputPath = nombreArchivo+".dot";
            //path de salida del grafo, es decir el path de la imagen que vamos a crear con graphviz
            String fileOutputPath = nombreArchivo+".jpg";
            //tipo de imagen de salida, en este caso es jpg
            String tParam = "-Tjpg";
            String tOParam = "-o";
            //recordemos el comando en la consola de windows: C:\Archivos de programa\Graphviz 2.21\bin\dot.exe -Tjpg grafo1.txt -o grafo1.jpg Esto es lo que concatenamos en el vector siguiente:
            String[] cmd = new String[5];
            cmd[0] = dotPath;
            cmd[1] = tParam;
            cmd[2] = fileInputPath;
            cmd[3] = tOParam;
            cmd[4] = fileOutputPath;
            Runtime rt = Runtime.getRuntime();
            rt.exec( cmd );
            
            File objetofile = new File ("‚Ä™AST.jpg");
            Desktop.getDesktop().open(objetofile);
        } catch (IOException ioe) {
            System.err.println(ioe.getMessage());
        }
        
    }

    public void limpiar(){
        listaError.clear();
        Consola.setText("");
        jLabel1.setText("");
    }
    
     private void generarTS() {
         
        FileWriter filewriter = null;
        PrintWriter printw = null;
        try{
            filewriter = new FileWriter("‚Ä™TS.html");//declarar el archivo
            printw = new PrintWriter(filewriter);//declarar un impresor

            printw.println("<html>");
            printw.println("<head><title>Tabla de Simbolos</title><style type=\"text/css\">\n" +
            "body {\n" +
            " padding-left: 11em; \n" +
            "font-family: Georgia, \"Times New Roman\",Times, serif; \n" +
            "color: purple; \n" +
            "background-color: #d8da3d }\n" +
            "h1 { font-family: Helvetica, Geneva, Arial,SunSans-Regular, sans-serif }  \n" +
            "table { border-collapse: collapse; width: 80%;}\n" +
            "th, td { text-align: left;padding: 8px;}\n" +
            "tr:nth-child(even){ background-color: #f2f2f2}\n" +
            "th {background-color: #4CAF50;color: white;}\n" +
            "</style></head>");     

            //si quisieramos escribir una cadena que vide de una lista o 
            //de una variable lo concatenamos
            printw.println("<h1><font color=\"navy\">Tabla de Simbolos</font></h1>");
            printw.println("<h3><font color=\"navy\">Variables </font></h3>");
            printw.println("<table>");            
            printw.println("<tr><th>Variable</th><th>Tipo</th><th>Rol</th><th>Valor</th></tr>");
            
                Enumeration<Simbolo> enumeration = Global.getTabla().elements();
                while (enumeration.hasMoreElements())
                {
                    Simbolo sim = (Simbolo)enumeration.nextElement();
                    Tipo t = sim.getTipo();
                    Object val = sim.getValor();
                    val = traerString(val);
//                    if (val instanceof Object[]) {
//                        Object[] s = (Object[])val;
//                        val = traerString(val);
//                    }
                    printw.println("<tr><td>"+ sim.getIdentificador()+"</td><td>"+((t==null) ? "null" : t.getTipoPrimitivo())
                    +"</td><td>"+sim.getRol()+"</td><td>"+((val==null) ? "null" : val.toString())+"</td></tr>");
                }
            printw.println("</table>");    
            printw.println("</body>");
            printw.println("</html>");

            //no devemos olvidar cerrar el archivo para que su lectura sea correcta
            printw.close();//cerramos el archivo

        }   catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "ERROR al generar archivo de errores");        
        }
        try {
            File objetofile = new File ("‚Ä™TS.html");
            Desktop.getDesktop().open(objetofile);
        } catch (IOException exx) {
            JOptionPane.showMessageDialog(null, "No existe errores.html");
        }
    }

     private void generarTSFun() {
         
        FileWriter filewriter = null;
        PrintWriter printw = null;
        try{
            filewriter = new FileWriter("‚Ä™TS.html");//declarar el archivo
            printw = new PrintWriter(filewriter);//declarar un impresor

            printw.println("<html>");
            printw.println("<head><title>Tabla de Funciones</title><style type=\"text/css\">\n" +
            "body {\n" +
            " padding-left: 11em; \n" +
            "font-family: Georgia, \"Times New Roman\",Times, serif; \n" +
            "color: purple; \n" +
            "background-color: #d8da3d }\n" +
            "h1 { font-family: Helvetica, Geneva, Arial,SunSans-Regular, sans-serif }  \n" +
            "table { border-collapse: collapse; width: 80%;}\n" +
            "th, td { text-align: left;padding: 8px;}\n" +
            "tr:nth-child(even){ background-color: #f2f2f2}\n" +
            "th {background-color: #4CAF50;color: white;}\n" +
            "</style></head>");     

            //si quisieramos escribir una cadena que vide de una lista o 
            //de una variable lo concatenamos
            printw.println("<h1><font color=\"navy\">Tabla Funciones</font></h1>");
            printw.println("<h3><font color=\"navy\">Funciones </font></h3>");
            printw.println("<table>");            
            printw.println("<tr><th>Variable</th><th>Tipo</th><th>Rol</th><th>Valor</th></tr>");
            
                Enumeration<Simbolo> enumeration = Global.getFunciones().elements();
                while (enumeration.hasMoreElements())
                {
                    Simbolo sim = (Simbolo)enumeration.nextElement();
                    Tipo t = sim.getTipo();
                    Object val = sim.getValor();
                    if (val instanceof Object[]) {
                        Object[] s = (Object[])val;
                        val = Arrays.toString(s);
                    }
                    printw.println("<tr><td>"+ sim.getIdentificador()+"</td><td>"+((t==null) ? "null" : t.getTipoPrimitivo())
                    +"</td><td>"+sim.getRol()+"</td><td>"+((val==null) ? "null" : val.toString())+"</td></tr>");
                }
            printw.println("</table>");    
            printw.println("</body>");
            printw.println("</html>");

            //no devemos olvidar cerrar el archivo para que su lectura sea correcta
            printw.close();//cerramos el archivo

        }   catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "ERROR al generar archivo de errores");        
        }
        try {
            File objetofile = new File ("‚Ä™TS.html");
            Desktop.getDesktop().open(objetofile);
        } catch (IOException exx) {
            JOptionPane.showMessageDialog(null, "No existe errores.html");
        }
    }

     
    private void generarErrores() {
        FileWriter filewriter = null;
        PrintWriter printw = null;
        File salida = null;
        
        BufferedReader br = null;
        StringReader fr = null;
        BufferedWriter bw = null;
        
        try{
            salida = new File("errores.html");    
            if (!salida.exists()) {
                bw = new BufferedWriter(new FileWriter(salida));
                bw.write("#Archivo");
            }
            filewriter = new FileWriter("‚Ä™errores.html");//declarar el archivo
            printw = new PrintWriter(filewriter);//declarar un impresor

            printw.println("<html>");
            printw.println("<head><title>REPORTES DE ERRORES</title><style type=\"text/css\">\n" +
            "body {\n" +
            " padding-left: 11em; \n" +
            "font-family: Georgia, \"Times New Roman\",Times, serif; \n" +
            "color: purple; \n" +
            "background-color: #d8da3d }\n" +
            "h1 { font-family: Helvetica, Geneva, Arial,SunSans-Regular, sans-serif }  \n" +
            "table { border-collapse: collapse; width: 80%;}\n" +
            "th, td { text-align: left;padding: 8px;}\n" +
            "tr:nth-child(even){ background-color: #f2f2f2}\n" +
            "th {background-color: #4CAF50;color: white;}\n" +
            "</style></head>");     

            //si quisieramos escribir una cadena que vide de una lista o 
            //de una variable lo concatenamos
            printw.println("<center><h1><font color=\"navy\">REPORTE DE ERRORES</font></h1></center>");
            Date date = new Date();
            DateFormat hourdateFormat = new SimpleDateFormat("HH:mm:ss dd/MM/yyyy");
            printw.println("<h3><font color=\"navy\">Errores - "+hourdateFormat.format(date)+"</font></h3>");
            printw.println("<table>");            
            printw.println("<tr><th>Linea</th><th>Columna</th><th>Tipo</th><th>Mensaje</th></tr>");
            for(JError e: listaError) {
                printw.println("<tr><td>"+e.getLinea()+"</td><td>"+e.getColumna()+"</td><td>"+e.getTipoError()+"</td><td>"+e.getDesc()+"</td></tr>");
            }
            printw.println("</table>");    
            printw.println("</body>");
            printw.println("</html>");

            //no devemos olvidar cerrar el archivo para que su lectura sea correcta
            printw.close();//cerramos el archivo

          //  System.out.println("Generado exitosamente");//si todo sale bien mostramos un mensaje de guardado exitoso

        }   catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "ERROR al generar archivo de errores");        
        }finally{
            try{                    
                if( null != fr ){   
                    fr.close();  
                }           
                if (bw != null) {
                    bw.close();
                }
            }catch (IOException e2){ 
                e2.printStackTrace();
            }
        }
        try {
            File objetofile = new File ("‚Ä™errores.html");
            Desktop.getDesktop().open(objetofile);
        } catch (IOException exx) {
            JOptionPane.showMessageDialog(null, "No existe errores.html");
        }
    }

    private Object traerString(Object o) {
            if (o instanceof ListVar) 
            {
                ListVar s = (ListVar)o;
                String cad = "";
                for (int i = 0; i < s.size(); i++) {
                    if (s.get(i) instanceof Object[]) {
                        cad = cad + Arrays.toString((Object[])s.get(i));
                    }
                    else{
                        cad = i ==0 ? ""+s.get(i) : cad + (","+s.get(i));
                    }
                    
                }
                //System.out.println("");
                return ("["+cad+"]");
            }
            else if(o instanceof Object[][])
            {
                Object [][] m = (Object[][]) o;
                String cad = "";
                for (Object[] row : m){
                    //System.out.println(Arrays.toString(row)); 
                    cad = cad + (Arrays.toString(row));
                } 
                return cad;
            }
            else if (o instanceof Object[]) {
                Object[] s = (Object[])o;
                
                return (Arrays.toString(s));
                
                //System.out.println(Arrays.toString(s));
            }
            else if (o != null) {
                return (o.toString());
             //  System.out.println(o.toString());
            }
        return null;
    }

    private void archivo(String texto) {
        File salida = null;
        BufferedReader br = null;
        StringReader fr = null;
        FileWriter fichero = null;
        PrintWriter pw = null;
        BufferedWriter bw = null;
        try {
            salida = new File("C:\\Users\\p_ab1\\Desktop\\Archivos\\entrada.txt");            
                        
            fr = new StringReader(texto);
            br = new BufferedReader(fr);
            String linea;            
            if (!salida.exists()) {
                bw = new BufferedWriter(new FileWriter(salida));
                bw.write("#Archivo");
            }            
            fichero = new FileWriter("C:\\Users\\p_ab1\\Desktop\\Archivos\\entrada.txt");
            pw = new PrintWriter(fichero);
            
            while((linea=br.readLine())!=null) {
                if (linea.contains("=>")) {
                    int intIndex = linea.indexOf("(");
                    if (intIndex != -1) {
                        linea = linea.replace("=>", "");
                        for (int i = 0; i < linea.toCharArray().length; i++) {
                            if(i == intIndex){
                                pw.print("function(");
                            }else{
                                pw.print(linea.charAt(i));                            
                            }
                        }
                    pw.println("");
                    }                    
                }else{
                    pw.println(linea);
                }                
            }      
        }catch(IOException e){
            e.printStackTrace();
        }finally{
            try{                    
                if( null != fr ){   
                    fr.close();  
                }                
                if (fichero != null) {                    
                    fichero.close();
                }
                if (br != null) {
                    br.close();
                }
                if (pw != null) {
                    pw.close();     
                }
                if (bw != null) {
                    bw.close();
                }
            }catch (IOException e2){ 
                e2.printStackTrace();
            }
        }
    }
    
}
