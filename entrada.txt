if("hol" > "hola"){
    print("s");
}
else{
    print("n");
}

prueba = true;
print("uno: "+prueba)
prueba = 10
print("dos: "+prueba)
if(prueba == 10){
    prueba = 20
    print("tres "+ prueba)
}
print("cuatro"+prueba)
prueba = false;
prueba = c(true,false,true)
if(prueba == prueba){
    print("bien");
}

if(5 == 5.0)
{
	print("si");
}else {
	print("no")
}
print(5>2 ? "sacaste 100" : "sacaste 0")

if(3>4){
	print("cagadales");
}else{
	print("codgio pelado");
}

if(3>4){
	print("nel");
}else if(4<2){
	print("nel x2");
}else if(9>4){
	print("codigo pelado");
}else{
	print("nel x3");
}

If( 3 > 4) { 
    print(1) 
} else if (2 > 5){ 
    print(2) 
} else { 
    print(3)
}

If(FALSE){ 
    print("imp:"+true) 
}
ELSE{
    print("imp:"+FALSE)
}


PRINT(1+1-1*1+1+1-(5^2));
print(5>2 ? "sacaste 100" : "sacaste 0")
d=2
print(d)
a=3;
print(a);
v = c(10,20,30,41,58);
print(v);
v[10] = 20;
print(v);
hola(5);
hola();
break
print("------- prueba grafica-----");
x = c(19, 26, 55)
labels =  c("Residential", "Non-Residential", "Utility")
pie (x, labels, "ACA TITULO");          

xlab = "Meses"
ylab = "Milimetros"
v = C(40,20,80,110,120,40,80,125,32,160,55,21);
main = c("Grafica Lineas")
#plot(v,"p",xlab,ylab,main);         #4
#plot(v,"i",xlab,ylab,main);         #5
#plot(v,c("o"),xlab,ylab,main);      #6

#plot(matrix(c(10,20,30),3,3),c("o"),xlab,ylab,main);
continue
val = trunk (5.8) #val toma el valor de 5
print(val);
val = round(5.8) #val tome el valor de 6 
print(val);
val = round(5.5) #val tome el valor de 6 
print(val);
val = round(5.4) #val tome el valor de 5
print(val);

print("------- Pruebas Matrix -----");
AdA = matrix(c(1, 2, 3, 4, 5), 5, 4)
print(AdA);
string = matrix(c("1", 2, 3, 4), 5, 4)
print(string);
Vec1 = c(1,2,3,4) 
AAA = matrix(vec1, 2, 1)
print(AAA);
uno = matrix(5, 3, 5)
print(uno);
mayor = matrix(c(1,2,3,4),2,2)
print(mayor);
mayor = matrix(c(1,2.5,3,4,5),2,2)
print(mayor);
ejemplo = matrix(c(1, "2", 3, 4), 3, 4)
print("------- Accesos Matrix -----");
accesos = ejemplo[5]
print(accesos)      #1
accesos = ejemplo[2,2]
print(accesos)      #"1"
accesos = ejemplo[,3]
print(accesos)      #"3,4,1"
accesos = ejemplo[2,]
print(accesos)      #"2,1,4,3"

ejemplo = matrix(c(1, "2", 3, 4), 3, 4)
print("------- Modificacion Matrix -----");
prinT(ejemplo);
ejemplo[3,3] = 8
prinT(ejemplo)
ejemplo[2, ] = 9
prinT(ejemplo)
ejemplo[2, ] = c(7)
prinT(ejemplo)
ejemplo[ ,4] = 6
prinT(ejemplo);
ejemplo[ ,4] = c(6,3,9,45) # Error 
ejemplo[ ,4] = c(6,7,8)
print(ejemplo);
ejemplo[7] = 0
print(ejemplo);

print("------- Modificacion listas -----");
L1 = list("hola");

L1[[4]] = "45"
print(l1);                  #L1 -> ["hola", NULL, NULL, "45"]
L1[[3]] = "cambio"          
print(l1);                  #L1 -> ["hola", NULL, "cambio", "45"]
L1 = c(L1, "nuevo")
print(L1)                   #L1 -> ["hola", NULL, "cambio", "45", "nuevo"]
L2 = list("hola");
L2[4] = c("45", "adios")    #error porque l2[4] = list["hola"]
print(L2[4])
L2[4] = list(c("45", "adiós"))

print(L2);                  #L2 -> ["hola", NULL, NULL, ("45", "adios")]


print("------- Creando listas -----");
l1 = list(1,1);
l2 = list(3,4);
A = c(1,2,l1)       
print(A)            # [1,2,1,1]
B = c(l1,l2,l2,l2)    
print(B)            # [1,1,3,4,3,4,3,4]

Lista1 = list("hola mundo");
Lista2 = list("hola mundo", 43, TRUE, 32.3)
print(Lista1);          #[hola mundo]
print(Lista2);          #[hola mundo 43, TRUE, 32.3]

Lista3 = c(Lista1, Lista2)          
print(Lista3);                              #Lista3 -> ["hola mundo", "hola mundo", 43, TRUE, 32.3]
Lista4 = c(List(1,2,3), 4, "hola mundo")
print(lista4);                          # Contenido de Lista4 -> [1,2,3,4, "hola mundo"]

print("------- 1) Acceso listas -----");

aa = list(1,2,3)
print(aa[2])                 # Te devuelve list[2]
print(aa[[2]])               # Te devuelve 2

aa =  list(1,list(2,3),4)
print(aa);           #[1,[2,3],4]
print(aa[2])               # Te devuelve list[list[2,3]]
print(aa[[2]])             # Te devuelve list[2,3]
print(aa[[2]][[1]])        # Te devuelve 2


print("------- 2) Acceso listas -----");

Lista1 = list(1,2,3,4)
Lista2 = Lista1[2]
print(Lista2)               #list[2]
Num = Lista1[[3]]
print(num)                  # num -> 3
Lista3 = list(1,2, 3, 4, c(5,6))   
print(Lista3)               #Lista3 = [1,2,3,4, (5,6)]
Lista4 = Lista3[5]
print(Lista4);              #Lista4 = list[(5,6)]
Vector1 = Lista3[[5]]       
print(Vector1)              # (5,6)
Print(Lista3[[5]][2])       #6
Print(Lista3[5][[1]][1])    #5


print("------ Prueba Vectores ------")\
Perro = "Perro"
Gato = "Gato" 
Animales = c(Perro, Gato) # Contenido del vector animales -> [Perro", Gato"] 
print(animales);
# Acceso vector0
Aux = Animales[1] # Recordar que el índice inicia en 1, contenido del vector Aux -> [Perro"] 
print(aux);
# Creando otro vector 
Animales = c(Aux, Animales) # Contenido del vector animales -> [Perro", Perro", Gato"]
print(animales);
# Creando otro vector 
Animales = c(Animales[3], Animales) # Contenido del vector animales -> [Gato", Perro", Perro", Gato"]
print(animales);

Aux = Animales[5][1][1][1][1] # Recordar que el índice inicia e  n 1, contenido del vector Aux -> [Perro"]

print(Aux)'

VectorN = NULL # Vector de tipo String
prinT(VectorN);

a = "a"
PRINT(a);

b = a[1][1];
print(b[1]);
c = b;
print(c)    

Vec1 = c(1,2,true, "HOLA", 4.5);
Vec2 = c(1,2,true, 5, 4.5);
Vec3 = c(Vec1,Vec2);

Vector1 = c(1,2,true, 5.5, 4.5);
Var1 = "pala"
Vector2 = c(Var1,Vector1);  
print(VeC3)
prinT(VeCtOr2)

v1=c(1,2.5);
v2=c(3,4);

v3=c(v1,v2);

print(v3[1]);
print(v3[2]);
print(v3[3]);
print(v3[4]);
print(v3[5]);

print("------ Prueba Cuadrado con While ------");
contador = 1;
cuadro = 5*2-2^2;
while (contador <= cuadro){
    contador2 = 1;
    cad = "";
    while (contador2 <= cuadro)
    {
        cad = cad + ("*");
        contador2 = contador2 + 1;
    } 
    print(cad);
    contador = contador + 1;
}

print("------ Prueba break ------");
i = 0; 
cad = "res: ";
while (i < 10) {
    cad = cad +" "+ (i);
    i = i + 1;
    if (i == 4) {
        break;
    }
}
print(cad);
cad = "res:";
print("------ Prueba continue ------");
i = 0;
while (i < 10) {
    if (i == 4) {
        i = i +1;
        continue;
    }
    cad = cad +" "+ (i);
    i = i +1;
}  
print(cad);

print("------- Preuebas For-----");
for(i in 3){ 
    print(i) 
}

for(i in c(1,2,3,4,5,6)){ 
    print(i) 
}

print("------ Conteo de digitos ------");
numero = 455788819;
digitos = 0;
do {
    numero =  numero / 10;
    digitos = digitos +1;
}while ( numero > 0 );
print("No digitos: "+digitos);
return (1+2)
return (1+2);
return
return;

a = 3;
print(f1());
f1 = function(){
       a = 5
       print(a);
       return(89);
}

aritmeticas_basicas()
aritmeticas_avanzadas()
operaciones_relacionales_basicas()
operaciones_relacionales_avanzadas()
operaciones_logicas_basicas()
operaciones_logicas_avanzadas();
operaciones_conjuntas()

aritmeticas_basicas = function(){
    print("1) Operaciones Aritmeticas Basicas")
    # 1765
    temp1 = 10 + 45 * 78 / 2
    texto = "1.1) "
    print(texto + ": " + temp1)
    # 80
    temp2 = 0 + (10 * 8)
    texto = "1.2) "
    print(texto + ": " + temp2)
    # 9
    #temp3 = int(8 - 7 + 2**3)
    temp3 = 8 - 7 + 2*3
    texto = "1.3) "
    print(texto + ": " + temp3)

} 

aritmeticas_avanzadas = function(){
        print("2) Operaciones Aritmeticas Avanzadas")
        # 112
        temp1 = 15 * 7 - 2 / 2 - 8 * (5 - 6)
        texto = "2.1) "
        print(texto + " : " + temp1)
        # 143
        #int temp2 = int (0 + (10 * 8) - 18 + 3**4 )
        temp2 = 0 + (10 * 8) - 18 + 3*4 
        texto = "2.2) "
        print(texto + " : " + temp2)
        # 14
        #int temp3 = int ((8 - 7 + 2**3 / 3) * 4)
        temp3 = (8 - 7 + 2*3 / 3) * 4
        texto = "2.3) "
        print(texto + " : " + temp3)
}

operaciones_relacionales_basicas = function(){
    print("3) Operaciones Relacionales Basicas")
        salida = 0
        if(salida < 10){
            salida = 5 * 9
            if(salida > 44){
                salida = salida + 1            
            }
        }else{
            salida = 1
        }
        if (salida != 1){
            if (salida == 46){
                print("Salida CORRECTA!!")
            }else{
                print("Salida incorrecta!!")            
            }
        }else{
            print("Salida incorrecta!!")    
        }
}

operaciones_relacionales_avanzadas = function(){
        print("4)Operaciones Relacionales Avanzadas")
        if(10 - 15 >= 0){
            print("Salida incorrecta!!")
        }else{
            if(15 + 8 == 22 - 10 + 5 * 3 - 4){
                if(10 != 11 - 2){
                    print("Salida CORRECTA!!")
                }else{
                    print("Salida incorrecta!!")
                }
            }else{
                if(1 == 1){
                    print("Salida incorrecta!!")
                }else{
                    print("Salida incorrecta!!")
                }
            }
        }
}

operaciones_logicas_basicas = function(){
        print("5) Operaciones Logicas Basicas")
        if(((true == true) & (true != false)) | (1 > 10) & (!(true == true) == true)){
            print("Salida CORRECTA!!")
        }else{
            print("Salida incorrecta!!")
        }
}

 operaciones_logicas_avanzadas = function(){
        print("6) Operaciones Logicas Avanzadas")
        if((15 == 14) | (((15 * 2 >= 15) & (12 < 24)) | ((98 / 2 == 15) | (!(15 != 6 - 1))))){
            print("Salida CORRECTA!!")
        }else{
            print("Salida incorrecta!!")
        }
 }

 operaciones_conjuntas = function(){
        print("7) Operaciones Conjuntas")
        if (!(5 * 3 - 1 == 14) & !(!(15 == 6 - 1))){
            print("Salida incorrecta!!")
        }else{
            variable = -1 * (54 / 6 + 9 + 9 - 1 * 8 / 2 * 17)
            var2 = 48 / 4 * 79 - 2 + 8
            salida = variable + "" + var2
            print("------------>" + salida)
            if(salida=="41954" | salida == "41.0954.0"){
                print("Salida CORRECTA!!")
            }else{
                print("Salida incorrecta!!")
            }
        }
 }

aritmeticas_basicas = ()=>{
    print ("no")
}


factorial = function(n){
    if (n == 0) {
        return(1);
    }else{            
        return (n * factorial(n-1));
    }
}

potencia = function(base, exp){
    #return exp == 0 ? 1 : (base * potencia(base, exp - 1))
    if( exp == 0){
        return(1)
    }else{
        return(base * potencia(base, exp - 1))
    }
}

reverse = function(x, length){
    if (length == 1){
			return (x)
    }else{
	    b = x %% 10
	    x = x / 10
		return ((b * (10 ^ (length - 1))) + reverse(x, length-1))
	    #return int((b * (10 ** (length - 1))) + reverse(x, length - 1))
    }
}

mcd = (n1, n2) =>{
        if (n2 != 0) {
            return(mcd(n2, n1 %% n2));
        } else {
            return (n1);
        }
    }

    fibonacci = function(n) {
        if (n <= 1) {
            return(n);
        }
        return(fibonacci(n - 1) + fibonacci(n - 2));
    }

Hanoi = function(discos,origen,auxiliar, destino) {
        if (discos == 1) {
            print(origen+", "+ destino)
        } else {
            Hanoi(discos - 1, origen, destino, auxiliar);
            print(origen+ ", "+ destino)
            Hanoi(discos - 1, auxiliar, origen, destino);
        }
    }

hofstaderFemenina = function(n) {
        if (n < 0) {
            return( 0);
        } else {
            return( (n == 0) ? 1 : n - hofstaderFemenina(n - 1));
        }
    }

hofstaderMasculino = function(n){
		if (n < 0){
			return (0)
		}else {
			#return n == 0 ? 0 : n - hofstaderMasculino(n - 1)
			if (n == 0){
				return (0)
            }else{
				return (n - hofstaderMasculino(n - 1))
            }
        }
}

pAr = function(nump) {
        if (nump == 0) {
            return (1);
        }
        return (impar(nump - 1));
    }

impar = (numi) => {
        if (numi == 0) {
            return (0);
        }
        return( par(numi - 1));
    }

    ackermann = function(m, n) {
        if (m == 0) {
            return (n + 1);
        } else if (m > 0 & n == 0) {
            return (ackermann(m - 1, 1));
        } else {
            return(ackermann(m - 1, ackermann(m, n - 1)));
        }
    }

fcc = (n) => {
    if(n <= 0){ 
        return(1); 
    } 
    return(n*fcc(n-1)); 
}

F1 = (param1=3, param2, param3 = 4) => { 
    PRINT(param1+", "+param2+", "+param3); 
}

print("------ Prueba return vacio ------");
print(factorial2(default));

factorial2 = (n="nada") => { 
    print("entro pero no retorno "+n);
    Return 
}

F1(default, default, default); # error porque param2 no tiene default
F1(default, 34, 5); # imprime: 3, 34, 5
F1(default, 34, default); # imprime: 3, 34, 4


print("----- Seccion de recursi?n -----")
print("Analizando factorial de un numero")
if (479001600 == factorial(12)){
    print("Done."+factorial(12))
}else{
    print("RIP.")
}
if (362880 == fcc(9)){
    print("Done."+fcc(9))
}else{
    print("RIP.")
}

print("Analizando potencia")
if (64 == potencia(2, 6)){
    print("Done."+potencia(2, 6))
}else{
    print("RIP.")
}

print("Analizando inversion de un numero")
if (321 == reverse(123, 3)){
    print("Done."+reverse(123, 3))
}else{
    print("RIP.")
}

print("Analizando MCD")
if (25 == mcd(25, 75)){
    print("Done."+mcd(25, 75))
}else{
    print("RIP.")
}

print("Analizando Fibonacci")
if (55 == fibonacci(10)){
    print("Done."+fibonacci(10))
}else{
    print("RIP.")
}

print("Analizando Hanoi")
Hanoi(3,1,2,3)

print("Analizando Hofstadter")
if (8 == hofstaderMasculino(15)){
    print("Done."+hofstaderMasculino(15))
}else{
   print("RIP.")
}

print("Analizando Par")
if (1 == paR(1500)){
    print("Done.")
}else{
    print("RIP.")
    }

#print("Analizando Ackerman")
#if (253 == ackermann(3, 5)){
#    print("Done.")
#}else{
#    print("RIP.")
#}
#print(ackermann(3,7));

sw = 3;
switch (sw) { 
    case 3: 
        print(3);
        break; 
    case 5: 
        print(5)
        break; 
    case 7: 
        print(7);
    default: 
        print("defautl")
}